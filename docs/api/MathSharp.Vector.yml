### YamlMime:ManagedReference
items:
- uid: MathSharp.Vector
  commentId: T:MathSharp.Vector
  id: Vector
  parent: MathSharp
  children:
  - MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  - MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.AllFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.AllTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.And``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  - MathSharp.Vector.And``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  - MathSharp.Vector.AndNot``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  - MathSharp.Vector.AndNot``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  - MathSharp.Vector.AnyFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.AnyTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  - MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  - MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  - MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.ElementFalse(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  - MathSharp.Vector.ElementTrue(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  - MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.Floor(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  - MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  - MathSharp.Vector.Load(System.Numerics.Vector2)
  - MathSharp.Vector.Load(System.Numerics.Vector3)
  - MathSharp.Vector.Load(System.Numerics.Vector4)
  - MathSharp.Vector.Load2D(System.Double*)
  - MathSharp.Vector.Load2D(System.Single*)
  - MathSharp.Vector.Load2DAligned(System.Double*)
  - MathSharp.Vector.Load2DAligned(System.Single*)
  - MathSharp.Vector.Load3D(System.Double*)
  - MathSharp.Vector.Load3D(System.Single*)
  - MathSharp.Vector.Load3DAligned(System.Double*)
  - MathSharp.Vector.Load3DAligned(System.Single*)
  - MathSharp.Vector.Load4D(System.Double*)
  - MathSharp.Vector.Load4D(System.Single*)
  - MathSharp.Vector.Load4DAligned(System.Double*)
  - MathSharp.Vector.Load4DAligned(System.Single*)
  - MathSharp.Vector.LoadScalar(System.Double)
  - MathSharp.Vector.LoadScalar(System.Single)
  - MathSharp.Vector.LoadScalarBroadcast(System.Double)
  - MathSharp.Vector.LoadScalarBroadcast(System.Single)
  - MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  - MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Not``1(System.Runtime.Intrinsics.Vector128{``0})
  - MathSharp.Vector.Not``1(System.Runtime.Intrinsics.Vector256{``0})
  - MathSharp.Vector.OneDouble
  - MathSharp.Vector.Or``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  - MathSharp.Vector.Or``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  - MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  - MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  - MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  - MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  - MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.SelectWhereFalse``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  - MathSharp.Vector.SelectWhereFalse``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  - MathSharp.Vector.SelectWhereTrue``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  - MathSharp.Vector.SelectWhereTrue``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  - MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  - MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  - MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  - MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  - MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  - MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector2@)
  - MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector3@)
  - MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector4@)
  - MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  - MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  - MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  - MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  - MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double@)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  - MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector128{System.Single})
  - MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  - MathSharp.Vector.Xor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  - MathSharp.Vector.Xor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  - MathSharp.Vector.ZeroDouble
  langs:
  - csharp
  - vb
  name: Vector
  nameWithType: Vector
  fullName: MathSharp.Vector
  type: Class
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Vector
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 11
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static class Vector
    content.vb: Public Module Vector
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MathSharp.Vector.SelectWhereTrue``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  commentId: M:MathSharp.Vector.SelectWhereTrue``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  id: SelectWhereTrue``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SelectWhereTrue<T, U>(Vector128<T>, Vector128<U>)
  nameWithType: Vector.SelectWhereTrue<T, U>(Vector128<T>, Vector128<U>)
  fullName: MathSharp.Vector.SelectWhereTrue<T, U>(System.Runtime.Intrinsics.Vector128<T>, System.Runtime.Intrinsics.Vector128<U>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SelectWhereTrue
    path: Vector/Shared/BitOperations.T.cs
    startLine: 18
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nSelect the elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">vector</code> where the equivalent element in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> is true\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> SelectWhereTrue<T, U>(Vector128<T> vector, Vector128<U> selector)
          where T : struct where U : struct
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The vector to select elements from
    - id: selector
      type: System.Runtime.Intrinsics.Vector128{{U}}
      description: The vector to use to select elements from <code data-dev-comment-type="paramref" class="paramref">vector</code>
    typeParameters:
    - id: T
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">vector</code>
    - id: U
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">selector</code>
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> with the elements selected by <code data-dev-comment-type="paramref" class="paramref">selector</code> retained and the others zeroed
    content.vb: Public Shared Function SelectWhereTrue(Of T As Structure, U As Structure)(vector As Vector128(Of T), selector As Vector128(Of U)) As Vector128(Of T)
  overload: MathSharp.Vector.SelectWhereTrue*
  nameWithType.vb: Vector.SelectWhereTrue(Of T, U)(Vector128(Of T), Vector128(Of U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SelectWhereTrue(Of T, U)(System.Runtime.Intrinsics.Vector128(Of T), System.Runtime.Intrinsics.Vector128(Of U))
  name.vb: SelectWhereTrue(Of T, U)(Vector128(Of T), Vector128(Of U))
- uid: MathSharp.Vector.SelectWhereFalse``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  commentId: M:MathSharp.Vector.SelectWhereFalse``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  id: SelectWhereFalse``2(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``1})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SelectWhereFalse<T, U>(Vector128<T>, Vector128<U>)
  nameWithType: Vector.SelectWhereFalse<T, U>(Vector128<T>, Vector128<U>)
  fullName: MathSharp.Vector.SelectWhereFalse<T, U>(System.Runtime.Intrinsics.Vector128<T>, System.Runtime.Intrinsics.Vector128<U>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SelectWhereFalse
    path: Vector/Shared/BitOperations.T.cs
    startLine: 32
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nSelect the elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">vector</code> where the equivalent element in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> is false\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> SelectWhereFalse<T, U>(Vector128<T> vector, Vector128<U> selector)
          where T : struct where U : struct
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The vector to select elements from
    - id: selector
      type: System.Runtime.Intrinsics.Vector128{{U}}
      description: The vector to use to select elements from <code data-dev-comment-type="paramref" class="paramref">vector</code>
    typeParameters:
    - id: T
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">vector</code>
    - id: U
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">selector</code>
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> with the elements selected by <code data-dev-comment-type="paramref" class="paramref">selector</code> retained and the others zeroed
    content.vb: Public Shared Function SelectWhereFalse(Of T As Structure, U As Structure)(vector As Vector128(Of T), selector As Vector128(Of U)) As Vector128(Of T)
  overload: MathSharp.Vector.SelectWhereFalse*
  nameWithType.vb: Vector.SelectWhereFalse(Of T, U)(Vector128(Of T), Vector128(Of U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SelectWhereFalse(Of T, U)(System.Runtime.Intrinsics.Vector128(Of T), System.Runtime.Intrinsics.Vector128(Of U))
  name.vb: SelectWhereFalse(Of T, U)(Vector128(Of T), Vector128(Of U))
- uid: MathSharp.Vector.And``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  commentId: M:MathSharp.Vector.And``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  id: And``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: And<T>(Vector128<T>, Vector128<T>)
  nameWithType: Vector.And<T>(Vector128<T>, Vector128<T>)
  fullName: MathSharp.Vector.And<T>(System.Runtime.Intrinsics.Vector128<T>, System.Runtime.Intrinsics.Vector128<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: And
    path: Vector/Shared/BitOperations.T.cs
    startLine: 44
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise AND operation on 2 <xref href=\"System.Runtime.Intrinsics.Vector128%601\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> And<T>(Vector128<T> left, Vector128<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The left vector which will be AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The right vector which will be AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> AND&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function And(Of T As Structure)(left As Vector128(Of T), right As Vector128(Of T)) As Vector128(Of T)
  overload: MathSharp.Vector.And*
  nameWithType.vb: Vector.And(Of T)(Vector128(Of T), Vector128(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.And(Of T)(System.Runtime.Intrinsics.Vector128(Of T), System.Runtime.Intrinsics.Vector128(Of T))
  name.vb: And(Of T)(Vector128(Of T), Vector128(Of T))
- uid: MathSharp.Vector.Or``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  commentId: M:MathSharp.Vector.Or``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  id: Or``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Or<T>(Vector128<T>, Vector128<T>)
  nameWithType: Vector.Or<T>(Vector128<T>, Vector128<T>)
  fullName: MathSharp.Vector.Or<T>(System.Runtime.Intrinsics.Vector128<T>, System.Runtime.Intrinsics.Vector128<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Or
    path: Vector/Shared/BitOperations.T.cs
    startLine: 86
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise OR operation on 2 <xref href=\"System.Runtime.Intrinsics.Vector128%601\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> Or<T>(Vector128<T> left, Vector128<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The left vector which will be OR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The right vector which will be OR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> OR&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function Or(Of T As Structure)(left As Vector128(Of T), right As Vector128(Of T)) As Vector128(Of T)
  overload: MathSharp.Vector.Or*
  nameWithType.vb: Vector.Or(Of T)(Vector128(Of T), Vector128(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Or(Of T)(System.Runtime.Intrinsics.Vector128(Of T), System.Runtime.Intrinsics.Vector128(Of T))
  name.vb: Or(Of T)(Vector128(Of T), Vector128(Of T))
- uid: MathSharp.Vector.Xor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  commentId: M:MathSharp.Vector.Xor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  id: Xor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Xor<T>(Vector128<T>, Vector128<T>)
  nameWithType: Vector.Xor<T>(Vector128<T>, Vector128<T>)
  fullName: MathSharp.Vector.Xor<T>(System.Runtime.Intrinsics.Vector128<T>, System.Runtime.Intrinsics.Vector128<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Xor
    path: Vector/Shared/BitOperations.T.cs
    startLine: 128
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise XOR operation on 2 <xref href=\"System.Runtime.Intrinsics.Vector128%601\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> Xor<T>(Vector128<T> left, Vector128<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The left vector which will be XOR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The right vector which will be XOR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> XOR&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function Xor(Of T As Structure)(left As Vector128(Of T), right As Vector128(Of T)) As Vector128(Of T)
  overload: MathSharp.Vector.Xor*
  nameWithType.vb: Vector.Xor(Of T)(Vector128(Of T), Vector128(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Xor(Of T)(System.Runtime.Intrinsics.Vector128(Of T), System.Runtime.Intrinsics.Vector128(Of T))
  name.vb: Xor(Of T)(Vector128(Of T), Vector128(Of T))
- uid: MathSharp.Vector.AndNot``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  commentId: M:MathSharp.Vector.AndNot``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  id: AndNot``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: AndNot<T>(Vector128<T>, Vector128<T>)
  nameWithType: Vector.AndNot<T>(Vector128<T>, Vector128<T>)
  fullName: MathSharp.Vector.AndNot<T>(System.Runtime.Intrinsics.Vector128<T>, System.Runtime.Intrinsics.Vector128<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: AndNot
    path: Vector/Shared/BitOperations.T.cs
    startLine: 171
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise NOT operation on <code data-dev-comment-type=\"paramref\" class=\"paramref\">left</code>, and then a bitwise AND operation on <code data-dev-comment-type=\"paramref\" class=\"paramref\">left</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">right</code>\nEquivalent to calling <pre><code>And(Not(left), right)</code></pre>\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> AndNot<T>(Vector128<T> left, Vector128<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The left vector which will be NOT&apos;ed, and then AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The right vector which will be AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> AND&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function AndNot(Of T As Structure)(left As Vector128(Of T), right As Vector128(Of T)) As Vector128(Of T)
  overload: MathSharp.Vector.AndNot*
  nameWithType.vb: Vector.AndNot(Of T)(Vector128(Of T), Vector128(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.AndNot(Of T)(System.Runtime.Intrinsics.Vector128(Of T), System.Runtime.Intrinsics.Vector128(Of T))
  name.vb: AndNot(Of T)(Vector128(Of T), Vector128(Of T))
- uid: MathSharp.Vector.Not``1(System.Runtime.Intrinsics.Vector128{``0})
  commentId: M:MathSharp.Vector.Not``1(System.Runtime.Intrinsics.Vector128{``0})
  id: Not``1(System.Runtime.Intrinsics.Vector128{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Not<T>(Vector128<T>)
  nameWithType: Vector.Not<T>(Vector128<T>)
  fullName: MathSharp.Vector.Not<T>(System.Runtime.Intrinsics.Vector128<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Not
    path: Vector/Shared/BitOperations.T.cs
    startLine: 212
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise NOT operation on a <xref href=\"System.Runtime.Intrinsics.Vector128%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public static Vector128<T> Not<T>(Vector128<T> vector)
          where T : struct
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: The vector which will be NOT&apos;ed
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector128{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector128%601" data-throw-if-not-resolved="false"></xref> with each element of <code data-dev-comment-type="paramref" class="paramref">vector</code> after being NOT&apos;ed
    content.vb: Public Shared Function Not(Of T As Structure)(vector As Vector128(Of T)) As Vector128(Of T)
  overload: MathSharp.Vector.Not*
  nameWithType.vb: Vector.Not(Of T)(Vector128(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Not(Of T)(System.Runtime.Intrinsics.Vector128(Of T))
  name.vb: Not(Of T)(Vector128(Of T))
- uid: MathSharp.Vector.SelectWhereTrue``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  commentId: M:MathSharp.Vector.SelectWhereTrue``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  id: SelectWhereTrue``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SelectWhereTrue<T, U>(Vector256<T>, Vector256<U>)
  nameWithType: Vector.SelectWhereTrue<T, U>(Vector256<T>, Vector256<U>)
  fullName: MathSharp.Vector.SelectWhereTrue<T, U>(System.Runtime.Intrinsics.Vector256<T>, System.Runtime.Intrinsics.Vector256<U>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SelectWhereTrue
    path: Vector/Shared/BitOperations.T.cs
    startLine: 227
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nSelect the elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">vector</code> where the equivalent element in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> is true\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> SelectWhereTrue<T, U>(Vector256<T> vector, Vector256<U> selector)
          where T : struct where U : struct
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The vector to select elements from
    - id: selector
      type: System.Runtime.Intrinsics.Vector256{{U}}
      description: The vector to use to select elements from <code data-dev-comment-type="paramref" class="paramref">vector</code>
    typeParameters:
    - id: T
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">vector</code>
    - id: U
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">selector</code>
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> with the elements selected by <code data-dev-comment-type="paramref" class="paramref">selector</code> retained and the others zeroed
    content.vb: Public Shared Function SelectWhereTrue(Of T As Structure, U As Structure)(vector As Vector256(Of T), selector As Vector256(Of U)) As Vector256(Of T)
  overload: MathSharp.Vector.SelectWhereTrue*
  nameWithType.vb: Vector.SelectWhereTrue(Of T, U)(Vector256(Of T), Vector256(Of U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SelectWhereTrue(Of T, U)(System.Runtime.Intrinsics.Vector256(Of T), System.Runtime.Intrinsics.Vector256(Of U))
  name.vb: SelectWhereTrue(Of T, U)(Vector256(Of T), Vector256(Of U))
- uid: MathSharp.Vector.SelectWhereFalse``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  commentId: M:MathSharp.Vector.SelectWhereFalse``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  id: SelectWhereFalse``2(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``1})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SelectWhereFalse<T, U>(Vector256<T>, Vector256<U>)
  nameWithType: Vector.SelectWhereFalse<T, U>(Vector256<T>, Vector256<U>)
  fullName: MathSharp.Vector.SelectWhereFalse<T, U>(System.Runtime.Intrinsics.Vector256<T>, System.Runtime.Intrinsics.Vector256<U>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SelectWhereFalse
    path: Vector/Shared/BitOperations.T.cs
    startLine: 241
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nSelect the elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">vector</code> where the equivalent element in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> is false\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> SelectWhereFalse<T, U>(Vector256<T> vector, Vector256<U> selector)
          where T : struct where U : struct
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The vector to select elements from
    - id: selector
      type: System.Runtime.Intrinsics.Vector256{{U}}
      description: The vector to use to select elements from <code data-dev-comment-type="paramref" class="paramref">vector</code>
    typeParameters:
    - id: T
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">vector</code>
    - id: U
      description: The type of each element in <code data-dev-comment-type="paramref" class="paramref">selector</code>
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> with the elements selected by <code data-dev-comment-type="paramref" class="paramref">selector</code> retained and the others zeroed
    content.vb: Public Shared Function SelectWhereFalse(Of T As Structure, U As Structure)(vector As Vector256(Of T), selector As Vector256(Of U)) As Vector256(Of T)
  overload: MathSharp.Vector.SelectWhereFalse*
  nameWithType.vb: Vector.SelectWhereFalse(Of T, U)(Vector256(Of T), Vector256(Of U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SelectWhereFalse(Of T, U)(System.Runtime.Intrinsics.Vector256(Of T), System.Runtime.Intrinsics.Vector256(Of U))
  name.vb: SelectWhereFalse(Of T, U)(Vector256(Of T), Vector256(Of U))
- uid: MathSharp.Vector.And``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  commentId: M:MathSharp.Vector.And``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  id: And``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: And<T>(Vector256<T>, Vector256<T>)
  nameWithType: Vector.And<T>(Vector256<T>, Vector256<T>)
  fullName: MathSharp.Vector.And<T>(System.Runtime.Intrinsics.Vector256<T>, System.Runtime.Intrinsics.Vector256<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: And
    path: Vector/Shared/BitOperations.T.cs
    startLine: 253
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise AND operation on 2 <xref href=\"System.Runtime.Intrinsics.Vector256%601\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> And<T>(Vector256<T> left, Vector256<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The left vector which will be AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The right vector which will be AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> AND&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function And(Of T As Structure)(left As Vector256(Of T), right As Vector256(Of T)) As Vector256(Of T)
  overload: MathSharp.Vector.And*
  nameWithType.vb: Vector.And(Of T)(Vector256(Of T), Vector256(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.And(Of T)(System.Runtime.Intrinsics.Vector256(Of T), System.Runtime.Intrinsics.Vector256(Of T))
  name.vb: And(Of T)(Vector256(Of T), Vector256(Of T))
- uid: MathSharp.Vector.Or``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  commentId: M:MathSharp.Vector.Or``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  id: Or``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Or<T>(Vector256<T>, Vector256<T>)
  nameWithType: Vector.Or<T>(Vector256<T>, Vector256<T>)
  fullName: MathSharp.Vector.Or<T>(System.Runtime.Intrinsics.Vector256<T>, System.Runtime.Intrinsics.Vector256<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Or
    path: Vector/Shared/BitOperations.T.cs
    startLine: 287
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise OR operation on 2 <xref href=\"System.Runtime.Intrinsics.Vector256%601\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> Or<T>(Vector256<T> left, Vector256<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The left vector which will be OR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The right vector which will be OR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> OR&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function Or(Of T As Structure)(left As Vector256(Of T), right As Vector256(Of T)) As Vector256(Of T)
  overload: MathSharp.Vector.Or*
  nameWithType.vb: Vector.Or(Of T)(Vector256(Of T), Vector256(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Or(Of T)(System.Runtime.Intrinsics.Vector256(Of T), System.Runtime.Intrinsics.Vector256(Of T))
  name.vb: Or(Of T)(Vector256(Of T), Vector256(Of T))
- uid: MathSharp.Vector.Xor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  commentId: M:MathSharp.Vector.Xor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  id: Xor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Xor<T>(Vector256<T>, Vector256<T>)
  nameWithType: Vector.Xor<T>(Vector256<T>, Vector256<T>)
  fullName: MathSharp.Vector.Xor<T>(System.Runtime.Intrinsics.Vector256<T>, System.Runtime.Intrinsics.Vector256<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Xor
    path: Vector/Shared/BitOperations.T.cs
    startLine: 321
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise XOR operation on 2 <xref href=\"System.Runtime.Intrinsics.Vector256%601\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> Xor<T>(Vector256<T> left, Vector256<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The left vector which will be XOR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The right vector which will be XOR&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> XOR&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function Xor(Of T As Structure)(left As Vector256(Of T), right As Vector256(Of T)) As Vector256(Of T)
  overload: MathSharp.Vector.Xor*
  nameWithType.vb: Vector.Xor(Of T)(Vector256(Of T), Vector256(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Xor(Of T)(System.Runtime.Intrinsics.Vector256(Of T), System.Runtime.Intrinsics.Vector256(Of T))
  name.vb: Xor(Of T)(Vector256(Of T), Vector256(Of T))
- uid: MathSharp.Vector.AndNot``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  commentId: M:MathSharp.Vector.AndNot``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  id: AndNot``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: AndNot<T>(Vector256<T>, Vector256<T>)
  nameWithType: Vector.AndNot<T>(Vector256<T>, Vector256<T>)
  fullName: MathSharp.Vector.AndNot<T>(System.Runtime.Intrinsics.Vector256<T>, System.Runtime.Intrinsics.Vector256<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: AndNot
    path: Vector/Shared/BitOperations.T.cs
    startLine: 356
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise NOT operation on <code data-dev-comment-type=\"paramref\" class=\"paramref\">left</code>, and then a bitwise AND operation on <code data-dev-comment-type=\"paramref\" class=\"paramref\">left</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">right</code>\nEquivalent to calling <pre><code>And(Not(left), right)</code></pre>\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> AndNot<T>(Vector256<T> left, Vector256<T> right)
          where T : struct
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The left vector which will be NOT&apos;ed, and then AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">right</code>
    - id: right
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The right vector which will be AND&apos;ed with <code data-dev-comment-type="paramref" class="paramref">left</code>
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> containing each element of <code data-dev-comment-type="paramref" class="paramref">left</code> AND&apos;ed with the equivalent element of <code data-dev-comment-type="paramref" class="paramref">right</code>
    content.vb: Public Shared Function AndNot(Of T As Structure)(left As Vector256(Of T), right As Vector256(Of T)) As Vector256(Of T)
  overload: MathSharp.Vector.AndNot*
  nameWithType.vb: Vector.AndNot(Of T)(Vector256(Of T), Vector256(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.AndNot(Of T)(System.Runtime.Intrinsics.Vector256(Of T), System.Runtime.Intrinsics.Vector256(Of T))
  name.vb: AndNot(Of T)(Vector256(Of T), Vector256(Of T))
- uid: MathSharp.Vector.Not``1(System.Runtime.Intrinsics.Vector256{``0})
  commentId: M:MathSharp.Vector.Not``1(System.Runtime.Intrinsics.Vector256{``0})
  id: Not``1(System.Runtime.Intrinsics.Vector256{``0})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Not<T>(Vector256<T>)
  nameWithType: Vector.Not<T>(Vector256<T>)
  fullName: MathSharp.Vector.Not<T>(System.Runtime.Intrinsics.Vector256<T>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/Shared/BitOperations.T.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Not
    path: Vector/Shared/BitOperations.T.cs
    startLine: 389
  assemblies:
  - MathSharp
  namespace: MathSharp
  summary: "\nPerform a bitwise NOT operation on a <xref href=\"System.Runtime.Intrinsics.Vector128%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public static Vector256<T> Not<T>(Vector256<T> vector)
          where T : struct
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: The vector which will be NOT&apos;ed
    typeParameters:
    - id: T
      description: The type of each element in the vector
    return:
      type: System.Runtime.Intrinsics.Vector256{{T}}
      description: A new <xref href="System.Runtime.Intrinsics.Vector256%601" data-throw-if-not-resolved="false"></xref> with each element of <code data-dev-comment-type="paramref" class="paramref">vector</code> after being NOT&apos;ed
    content.vb: Public Shared Function Not(Of T As Structure)(vector As Vector256(Of T)) As Vector256(Of T)
  overload: MathSharp.Vector.Not*
  nameWithType.vb: Vector.Not(Of T)(Vector256(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Not(Of T)(System.Runtime.Intrinsics.Vector256(Of T))
  name.vb: Not(Of T)(Vector256(Of T))
- uid: MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  id: FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: FusedMultiplyAdd(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.FusedMultiplyAdd(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: FusedMultiplyAdd
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 18
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> FusedMultiplyAdd(Vector256<double> x, Vector256<double> y, Vector256<double> z)
    parameters:
    - id: x
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: y
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: z
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function FusedMultiplyAdd(x As Vector256(Of Double), y As Vector256(Of Double), z As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.FusedMultiplyAdd*
  nameWithType.vb: Vector.FusedMultiplyAdd(Vector256(Of Double), Vector256(Of Double), Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Runtime.Intrinsics.Vector256(Of System.Double), System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: FusedMultiplyAdd(Vector256(Of Double), Vector256(Of Double), Vector256(Of Double))
- uid: MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  id: FastMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: FastMultiplyAdd(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.FastMultiplyAdd(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: FastMultiplyAdd
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 39
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> FastMultiplyAdd(Vector256<double> x, Vector256<double> y, Vector256<double> z)
    parameters:
    - id: x
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: y
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: z
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function FastMultiplyAdd(x As Vector256(Of Double), y As Vector256(Of Double), z As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.FastMultiplyAdd*
  nameWithType.vb: Vector.FastMultiplyAdd(Vector256(Of Double), Vector256(Of Double), Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Runtime.Intrinsics.Vector256(Of System.Double), System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: FastMultiplyAdd(Vector256(Of Double), Vector256(Of Double), Vector256(Of Double))
- uid: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Abs(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Abs(Vector256<Double>)
  nameWithType: Vector.Abs(Vector256<Double>)
  fullName: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Abs
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 50
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Abs(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Abs(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Abs*
  nameWithType.vb: Vector.Abs(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Abs(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Abs(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: HorizontalAdd(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.HorizontalAdd(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: HorizontalAdd
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 55
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> HorizontalAdd(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function HorizontalAdd(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.HorizontalAdd*
  nameWithType.vb: Vector.HorizontalAdd(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.HorizontalAdd(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: HorizontalAdd(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Add(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 67
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Add(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Add(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Add(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  id: Add(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector256<Double>, Double)
  nameWithType: Vector.Add(Vector256<Double>, Double)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 79
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Add(in Vector256<double> vector, double scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: scalar
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Add(ByRef vector As Vector256(Of Double), scalar As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(ByRef Vector256(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double)
  name.vb: Add(ByRef Vector256(Of Double), Double)
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Subtract(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 84
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Subtract(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Subtract(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Subtract(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  id: Subtract(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector256<Double>, Double)
  nameWithType: Vector.Subtract(Vector256<Double>, Double)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 96
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Subtract(in Vector256<double> vector, double scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: scalar
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Subtract(ByRef vector As Vector256(Of Double), scalar As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(ByRef Vector256(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double)
  name.vb: Subtract(ByRef Vector256(Of Double), Double)
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Multiply(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 101
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Multiply(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Multiply(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Multiply(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  id: Multiply(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector256<Double>, Double)
  nameWithType: Vector.Multiply(Vector256<Double>, Double)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 112
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Multiply(in Vector256<double> vector, double scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: scalar
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Multiply(ByRef vector As Vector256(Of Double), scalar As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(ByRef Vector256(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double)
  name.vb: Multiply(ByRef Vector256(Of Double), Double)
- uid: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Divide(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Divide
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 116
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Divide(in Vector256<double> dividend, in Vector256<double> divisor)
    parameters:
    - id: dividend
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: divisor
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Divide(ByRef dividend As Vector256(Of Double), ByRef divisor As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Divide*
  nameWithType.vb: Vector.Divide(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Divide(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Divide(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  commentId: M:MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  id: Divide(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector256<Double>, Double)
  nameWithType: Vector.Divide(Vector256<Double>, Double)
  fullName: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Divide
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 128
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Divide(in Vector256<double> dividend, double scalarDivisor)
    parameters:
    - id: dividend
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: scalarDivisor
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Divide(ByRef dividend As Vector256(Of Double), scalarDivisor As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.Divide*
  nameWithType.vb: Vector.Divide(ByRef Vector256(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Divide(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double)
  name.vb: Divide(ByRef Vector256(Of Double), Double)
- uid: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Clamp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Clamp(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Clamp(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Clamp
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 133
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Clamp(in Vector256<double> vector, in Vector256<double> low, in Vector256<double> high)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: low
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: high
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Clamp(ByRef vector As Vector256(Of Double), ByRef low As Vector256(Of Double), ByRef high As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Clamp*
  nameWithType.vb: Vector.Clamp(ByRef Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Clamp(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Clamp(ByRef Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Sqrt(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Sqrt(Vector256<Double>)
  nameWithType: Vector.Sqrt(Vector256<Double>)
  fullName: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Sqrt
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 137
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Sqrt(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Sqrt(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Sqrt*
  nameWithType.vb: Vector.Sqrt(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Sqrt(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Sqrt(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Max(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Max(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Max(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Max
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 149
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Max(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Max(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Max*
  nameWithType.vb: Vector.Max(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Max(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Max(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Min(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Min(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Min(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Min
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 161
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Min(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Min(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Min*
  nameWithType.vb: Vector.Min(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Min(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Min(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Negate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Negate(Vector256<Double>)
  nameWithType: Vector.Negate(Vector256<Double>)
  fullName: MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Negate
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 172
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Negate(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Negate(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Negate*
  nameWithType.vb: Vector.Negate(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Negate(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Negate(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  id: CopySign(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CopySign(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CopySign(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CopySign
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 175
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CopySign(Vector256<double> sign, Vector256<double> vector)
    parameters:
    - id: sign
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CopySign(sign As Vector256(Of Double), vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CopySign*
  nameWithType.vb: Vector.CopySign(Vector256(Of Double), Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CopySign(Vector256(Of Double), Vector256(Of Double))
- uid: MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector256{System.Double})
  id: ExtractSign(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ExtractSign(Vector256<Double>)
  nameWithType: Vector.ExtractSign(Vector256<Double>)
  fullName: MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ExtractSign
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 179
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> ExtractSign(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function ExtractSign(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.ExtractSign*
  nameWithType.vb: Vector.ExtractSign(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: ExtractSign(Vector256(Of Double))
- uid: MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector256{System.Double})
  id: ClearSign(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ClearSign(Vector256<Double>)
  nameWithType: Vector.ClearSign(Vector256<Double>)
  fullName: MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ClearSign
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 183
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> ClearSign(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function ClearSign(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.ClearSign*
  nameWithType.vb: Vector.ClearSign(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: ClearSign(Vector256(Of Double))
- uid: MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Mod2Pi(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Mod2Pi(Vector256<Double>)
  nameWithType: Vector.Mod2Pi(Vector256<Double>)
  fullName: MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Mod2Pi
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 187
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Mod2Pi(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Mod2Pi(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Mod2Pi*
  nameWithType.vb: Vector.Mod2Pi(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Mod2Pi(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Mod2Pi(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Round(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Round(Vector256<Double>)
  nameWithType: Vector.Round(Vector256<Double>)
  fullName: MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Round
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 198
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Round(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Round(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Round*
  nameWithType.vb: Vector.Round(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Round(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Round(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Remainder(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Remainder(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Remainder
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 226
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Remainder(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Remainder(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Remainder*
  nameWithType.vb: Vector.Remainder(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Remainder(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Remainder(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  commentId: M:MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  id: Remainder(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Remainder(Vector256<Double>, Double)
  nameWithType: Vector.Remainder(Vector256<Double>, Double)
  fullName: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Remainder
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 237
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Remainder(in Vector256<double> left, double right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Remainder(ByRef left As Vector256(Of Double), right As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.Remainder*
  nameWithType.vb: Vector.Remainder(ByRef Vector256(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Remainder(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double)
  name.vb: Remainder(ByRef Vector256(Of Double), Double)
- uid: MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Truncate(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Truncate(Vector256<Double>)
  nameWithType: Vector.Truncate(Vector256<Double>)
  fullName: MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Truncate
    path: Vector/VectorFloatingPoint/VectorDouble/BasicMaths.cs
    startLine: 240
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Truncate(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Truncate(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Truncate*
  nameWithType.vb: Vector.Truncate(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Truncate(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Truncate(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CompareEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareEqual(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CompareEqual(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareEqual
    path: Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
    startLine: 13
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CompareEqual(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CompareEqual(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CompareEqual*
  nameWithType.vb: Vector.CompareEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareEqual(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CompareEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CompareNotEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareNotEqual(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CompareNotEqual(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareNotEqual
    path: Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
    startLine: 25
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CompareNotEqual(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CompareNotEqual(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CompareNotEqual*
  nameWithType.vb: Vector.CompareNotEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareNotEqual(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CompareNotEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThan(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CompareGreaterThan(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThan
    path: Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
    startLine: 37
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CompareGreaterThan(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CompareGreaterThan(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CompareGreaterThan*
  nameWithType.vb: Vector.CompareGreaterThan(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThan(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CompareGreaterThan(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CompareLessThan(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThan(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CompareLessThan(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThan
    path: Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
    startLine: 49
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CompareLessThan(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CompareLessThan(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CompareLessThan*
  nameWithType.vb: Vector.CompareLessThan(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThan(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CompareLessThan(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThanOrEqual(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CompareGreaterThanOrEqual(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThanOrEqual
    path: Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
    startLine: 61
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CompareGreaterThanOrEqual(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CompareGreaterThanOrEqual(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CompareGreaterThanOrEqual*
  nameWithType.vb: Vector.CompareGreaterThanOrEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThanOrEqual(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CompareGreaterThanOrEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThanOrEqual(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CompareLessThanOrEqual(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThanOrEqual
    path: Vector/VectorFloatingPoint/VectorDouble/Comparisons.cs
    startLine: 73
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CompareLessThanOrEqual(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CompareLessThanOrEqual(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CompareLessThanOrEqual*
  nameWithType.vb: Vector.CompareLessThanOrEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThanOrEqual(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CompareLessThanOrEqual(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Load4DAligned(System.Double*)
  commentId: M:MathSharp.Vector.Load4DAligned(System.Double*)
  id: Load4DAligned(System.Double*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load4DAligned(Double*)
  nameWithType: Vector.Load4DAligned(Double*)
  fullName: MathSharp.Vector.Load4DAligned(System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load4DAligned
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 15
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Load4DAligned(double *p)
    parameters:
    - id: p
      type: System.Double*
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Load4DAligned(p As Double *) As Vector256(Of Double)
  overload: MathSharp.Vector.Load4DAligned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load3DAligned(System.Double*)
  commentId: M:MathSharp.Vector.Load3DAligned(System.Double*)
  id: Load3DAligned(System.Double*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load3DAligned(Double*)
  nameWithType: Vector.Load3DAligned(Double*)
  fullName: MathSharp.Vector.Load3DAligned(System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load3DAligned
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 18
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Load3DAligned(double *p)
    parameters:
    - id: p
      type: System.Double*
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Load3DAligned(p As Double *) As Vector256(Of Double)
  overload: MathSharp.Vector.Load3DAligned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load2DAligned(System.Double*)
  commentId: M:MathSharp.Vector.Load2DAligned(System.Double*)
  id: Load2DAligned(System.Double*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load2DAligned(Double*)
  nameWithType: Vector.Load2DAligned(Double*)
  fullName: MathSharp.Vector.Load2DAligned(System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load2DAligned
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 21
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Load2DAligned(double *p)
    parameters:
    - id: p
      type: System.Double*
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Load2DAligned(p As Double *) As Vector256(Of Double)
  overload: MathSharp.Vector.Load2DAligned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load4D(System.Double*)
  commentId: M:MathSharp.Vector.Load4D(System.Double*)
  id: Load4D(System.Double*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load4D(Double*)
  nameWithType: Vector.Load4D(Double*)
  fullName: MathSharp.Vector.Load4D(System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load4D
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 26
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Load4D(double *p)
    parameters:
    - id: p
      type: System.Double*
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Load4D(p As Double *) As Vector256(Of Double)
  overload: MathSharp.Vector.Load4D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load3D(System.Double*)
  commentId: M:MathSharp.Vector.Load3D(System.Double*)
  id: Load3D(System.Double*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load3D(Double*)
  nameWithType: Vector.Load3D(Double*)
  fullName: MathSharp.Vector.Load3D(System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load3D
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 51
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Load3D(double *p)
    parameters:
    - id: p
      type: System.Double*
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Load3D(p As Double *) As Vector256(Of Double)
  overload: MathSharp.Vector.Load3D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load2D(System.Double*)
  commentId: M:MathSharp.Vector.Load2D(System.Double*)
  id: Load2D(System.Double*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load2D(Double*)
  nameWithType: Vector.Load2D(Double*)
  fullName: MathSharp.Vector.Load2D(System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load2D
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 84
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Load2D(double *p)
    parameters:
    - id: p
      type: System.Double*
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Load2D(p As Double *) As Vector256(Of Double)
  overload: MathSharp.Vector.Load2D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.LoadScalar(System.Double)
  commentId: M:MathSharp.Vector.LoadScalar(System.Double)
  id: LoadScalar(System.Double)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LoadScalar(Double)
  nameWithType: Vector.LoadScalar(Double)
  fullName: MathSharp.Vector.LoadScalar(System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LoadScalar
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 107
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> LoadScalar(this double scalar)
    parameters:
    - id: scalar
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LoadScalar(scalar As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.LoadScalar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.LoadScalarBroadcast(System.Double)
  commentId: M:MathSharp.Vector.LoadScalarBroadcast(System.Double)
  id: LoadScalarBroadcast(System.Double)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LoadScalarBroadcast(Double)
  nameWithType: Vector.LoadScalarBroadcast(Double)
  fullName: MathSharp.Vector.LoadScalarBroadcast(System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LoadScalarBroadcast
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 113
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> LoadScalarBroadcast(this double scalar)
    parameters:
    - id: scalar
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LoadScalarBroadcast(scalar As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.LoadScalarBroadcast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: Store4DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store4DAligned(Vector256<Double>, Double*)
  nameWithType: Vector.Store4DAligned(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store4DAligned
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 123
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store4DAligned(this Vector256<double> vector, double *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store4DAligned(vector As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.Store4DAligned*
  nameWithType.vb: Vector.Store4DAligned(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: Store4DAligned(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: Store3DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store3DAligned(Vector256<Double>, Double*)
  nameWithType: Vector.Store3DAligned(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store3DAligned
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 126
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store3DAligned(this Vector256<double> vector, double *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store3DAligned(vector As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.Store3DAligned*
  nameWithType.vb: Vector.Store3DAligned(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: Store3DAligned(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: Store2DAligned(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store2DAligned(Vector256<Double>, Double*)
  nameWithType: Vector.Store2DAligned(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store2DAligned
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 129
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store2DAligned(this Vector256<double> vector, double *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store2DAligned(vector As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.Store2DAligned*
  nameWithType.vb: Vector.Store2DAligned(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: Store2DAligned(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: Store4D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store4D(Vector256<Double>, Double*)
  nameWithType: Vector.Store4D(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store4D
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 133
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store4D(this Vector256<double> vector, double *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store4D(vector As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.Store4D*
  nameWithType.vb: Vector.Store4D(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: Store4D(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: Store3D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store3D(Vector256<Double>, Double*)
  nameWithType: Vector.Store3D(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store3D
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 168
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store3D(this Vector256<double> vector, double *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store3D(vector As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.Store3D*
  nameWithType.vb: Vector.Store3D(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: Store3D(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: Store2D(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store2D(Vector256<Double>, Double*)
  nameWithType: Vector.Store2D(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store2D
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 190
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store2D(this Vector256<double> vector, double *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store2D(vector As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.Store2D*
  nameWithType.vb: Vector.Store2D(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: Store2D(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  commentId: M:MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  id: StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: StoreScalar(Vector256<Double>, Double*)
  nameWithType: Vector.StoreScalar(Vector256<Double>, Double*)
  fullName: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256<System.Double>, System.Double*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: StoreScalar
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 215
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void StoreScalar(this Vector256<double> scalar, double *destination)
    parameters:
    - id: scalar
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub StoreScalar(scalar As Vector256(Of Double), destination As Double *)
  overload: MathSharp.Vector.StoreScalar*
  nameWithType.vb: Vector.StoreScalar(Vector256(Of Double), Double*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double*)
  name.vb: StoreScalar(Vector256(Of Double), Double*)
- uid: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double@)
  commentId: M:MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double@)
  id: StoreScalar(System.Runtime.Intrinsics.Vector256{System.Double},System.Double@)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: StoreScalar(Vector256<Double>, out Double)
  nameWithType: Vector.StoreScalar(Vector256<Double>, out Double)
  fullName: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256<System.Double>, out System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: StoreScalar
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 221
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void StoreScalar(this Vector256<double> scalar, out double destination)
    parameters:
    - id: scalar
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: destination
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub StoreScalar(scalar As Vector256(Of Double), ByRef destination As Double)
  overload: MathSharp.Vector.StoreScalar*
  nameWithType.vb: Vector.StoreScalar(Vector256(Of Double), ByRef Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Double)
  name.vb: StoreScalar(Vector256(Of Double), ByRef Double)
- uid: MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector256{System.Double})
  id: ScalarToVector(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ScalarToVector(Vector256<Double>)
  nameWithType: Vector.ScalarToVector(Vector256<Double>)
  fullName: MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ScalarToVector
    path: Vector/VectorFloatingPoint/VectorDouble/Conversions.cs
    startLine: 231
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> ScalarToVector(Vector256<double> scalar)
    parameters:
    - id: scalar
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function ScalarToVector(scalar As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.ScalarToVector*
  nameWithType.vb: Vector.ScalarToVector(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: ScalarToVector(Vector256(Of Double))
- uid: MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  commentId: M:MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  id: Permute(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Permute(Vector256<Double>, Byte)
  nameWithType: Vector.Permute(Vector256<Double>, Byte)
  fullName: MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector256<System.Double>, System.Byte)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Permute
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 14
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Permute(Vector256<double> vector, byte control)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: control
      type: System.Byte
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Permute(vector As Vector256(Of Double), control As Byte) As Vector256(Of Double)
  overload: MathSharp.Vector.Permute*
  nameWithType.vb: Vector.Permute(Vector256(Of Double), Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Byte)
  name.vb: Permute(Vector256(Of Double), Byte)
- uid: MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector256{System.Double})
  id: PermuteWithX(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithX(Vector256<Double>)
  nameWithType: Vector.PermuteWithX(Vector256<Double>)
  fullName: MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithX
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 25
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> PermuteWithX(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function PermuteWithX(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.PermuteWithX*
  nameWithType.vb: Vector.PermuteWithX(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: PermuteWithX(Vector256(Of Double))
- uid: MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector256{System.Double})
  id: PermuteWithY(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithY(Vector256<Double>)
  nameWithType: Vector.PermuteWithY(Vector256<Double>)
  fullName: MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithY
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 29
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> PermuteWithY(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function PermuteWithY(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.PermuteWithY*
  nameWithType.vb: Vector.PermuteWithY(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: PermuteWithY(Vector256(Of Double))
- uid: MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector256{System.Double})
  id: PermuteWithZ(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithZ(Vector256<Double>)
  nameWithType: Vector.PermuteWithZ(Vector256<Double>)
  fullName: MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithZ
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 33
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> PermuteWithZ(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function PermuteWithZ(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.PermuteWithZ*
  nameWithType.vb: Vector.PermuteWithZ(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: PermuteWithZ(Vector256(Of Double))
- uid: MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector256{System.Double})
  id: PermuteWithW(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithW(Vector256<Double>)
  nameWithType: Vector.PermuteWithW(Vector256<Double>)
  fullName: MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithW
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 37
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> PermuteWithW(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function PermuteWithW(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.PermuteWithW*
  nameWithType.vb: Vector.PermuteWithW(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: PermuteWithW(Vector256(Of Double))
- uid: MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  commentId: M:MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  id: Shuffle(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Shuffle(Vector256<Double>, Vector256<Double>, Byte)
  nameWithType: Vector.Shuffle(Vector256<Double>, Vector256<Double>, Byte)
  fullName: MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>, System.Byte)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Shuffle
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 41
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Shuffle(Vector256<double> left, Vector256<double> right, byte control)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: control
      type: System.Byte
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Shuffle(left As Vector256(Of Double), right As Vector256(Of Double), control As Byte) As Vector256(Of Double)
  overload: MathSharp.Vector.Shuffle*
  nameWithType.vb: Vector.Shuffle(Vector256(Of Double), Vector256(Of Double), Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector256(Of System.Double), System.Runtime.Intrinsics.Vector256(Of System.Double), System.Byte)
  name.vb: Shuffle(Vector256(Of Double), Vector256(Of Double), Byte)
- uid: MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector256{System.Double})
  id: MoveMask(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: MoveMask(Vector256<Double>)
  nameWithType: Vector.MoveMask(Vector256<Double>)
  fullName: MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: MoveMask
    path: Vector/VectorFloatingPoint/VectorDouble/Logical.cs
    startLine: 52
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static byte MoveMask(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Byte
    content.vb: Public Shared Function MoveMask(vector As Vector256(Of Double)) As Byte
  overload: MathSharp.Vector.MoveMask*
  nameWithType.vb: Vector.MoveMask(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: MoveMask(Vector256(Of Double))
- uid: MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector256{System.Double})
  id: Sin(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Sin(Vector256<Double>)
  nameWithType: Vector.Sin(Vector256<Double>)
  fullName: MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Sin
    path: Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
    startLine: 18
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Sin(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Sin(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Sin*
  nameWithType.vb: Vector.Sin(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Sin(Vector256(Of Double))
- uid: MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  id: SinEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SinEstimate(Vector256<Double>)
  nameWithType: Vector.SinEstimate(Vector256<Double>)
  fullName: MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SinEstimate
    path: Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
    startLine: 76
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> SinEstimate(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function SinEstimate(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.SinEstimate*
  nameWithType.vb: Vector.SinEstimate(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: SinEstimate(Vector256(Of Double))
- uid: MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector256{System.Double})
  id: Cos(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Cos(Vector256<Double>)
  nameWithType: Vector.Cos(Vector256<Double>)
  fullName: MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Cos
    path: Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
    startLine: 122
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Cos(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Cos(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Cos*
  nameWithType.vb: Vector.Cos(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Cos(Vector256(Of Double))
- uid: MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  commentId: M:MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  id: CosEstimate(System.Runtime.Intrinsics.Vector256{System.Double})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CosEstimate(Vector256<Double>)
  nameWithType: Vector.CosEstimate(Vector256<Double>)
  fullName: MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CosEstimate
    path: Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
    startLine: 183
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CosEstimate(Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CosEstimate(vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CosEstimate*
  nameWithType.vb: Vector.CosEstimate(Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CosEstimate(Vector256(Of Double))
- uid: MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: SinCos(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SinCos(Vector256<Double>, out Vector256<Double>, out Vector256<Double>)
  nameWithType: Vector.SinCos(Vector256<Double>, out Vector256<Double>, out Vector256<Double>)
  fullName: MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector256<System.Double>, out System.Runtime.Intrinsics.Vector256<System.Double>, out System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SinCos
    path: Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
    startLine: 228
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void SinCos(Vector256<double> vector, out Vector256<double> sin, out Vector256<double> cos)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: sin
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: cos
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Sub SinCos(vector As Vector256(Of Double), ByRef sin As Vector256(Of Double), ByRef cos As Vector256(Of Double))
  overload: MathSharp.Vector.SinCos*
  nameWithType.vb: Vector.SinCos(Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: SinCos(Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: SinCosEstimate(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SinCosEstimate(Vector256<Double>, out Vector256<Double>, out Vector256<Double>)
  nameWithType: Vector.SinCosEstimate(Vector256<Double>, out Vector256<Double>, out Vector256<Double>)
  fullName: MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector256<System.Double>, out System.Runtime.Intrinsics.Vector256<System.Double>, out System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SinCosEstimate
    path: Vector/VectorFloatingPoint/VectorDouble/Trigonometry.cs
    startLine: 308
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void SinCosEstimate(Vector256<double> vector, out Vector256<double> sin, out Vector256<double> cos)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: sin
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: cos
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Sub SinCosEstimate(vector As Vector256(Of Double), ByRef sin As Vector256(Of Double), ByRef cos As Vector256(Of Double))
  overload: MathSharp.Vector.SinCosEstimate*
  nameWithType.vb: Vector.SinCosEstimate(Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: SinCosEstimate(Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.OneDouble
  commentId: P:MathSharp.Vector.OneDouble
  id: OneDouble
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: OneDouble
  nameWithType: Vector.OneDouble
  fullName: MathSharp.Vector.OneDouble
  type: Property
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: OneDouble
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 26
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> OneDouble { get; }
    parameters: []
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared ReadOnly Property OneDouble As Vector256(Of Double)
  overload: MathSharp.Vector.OneDouble*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MathSharp.Vector.ZeroDouble
  commentId: P:MathSharp.Vector.ZeroDouble
  id: ZeroDouble
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ZeroDouble
  nameWithType: Vector.ZeroDouble
  fullName: MathSharp.Vector.ZeroDouble
  type: Property
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ZeroDouble
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 35
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> ZeroDouble { get; }
    parameters: []
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared ReadOnly Property ZeroDouble As Vector256(Of Double)
  overload: MathSharp.Vector.ZeroDouble*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Normalize2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Normalize2D(Vector256<Double>)
  nameWithType: Vector.Normalize2D(Vector256<Double>)
  fullName: MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Normalize2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 39
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Normalize2D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Normalize2D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Normalize2D*
  nameWithType.vb: Vector.Normalize2D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Normalize2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Normalize2D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Normalize3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Normalize3D(Vector256<Double>)
  nameWithType: Vector.Normalize3D(Vector256<Double>)
  fullName: MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Normalize3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 43
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Normalize3D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Normalize3D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Normalize3D*
  nameWithType.vb: Vector.Normalize3D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Normalize3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Normalize3D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Normalize4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Normalize4D(Vector256<Double>)
  nameWithType: Vector.Normalize4D(Vector256<Double>)
  fullName: MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Normalize4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 47
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Normalize4D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Normalize4D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Normalize4D*
  nameWithType.vb: Vector.Normalize4D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Normalize4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Normalize4D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Length2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Length2D(Vector256<Double>)
  nameWithType: Vector.Length2D(Vector256<Double>)
  fullName: MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Length2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 55
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Length2D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Length2D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Length2D*
  nameWithType.vb: Vector.Length2D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Length2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Length2D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Length3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Length3D(Vector256<Double>)
  nameWithType: Vector.Length3D(Vector256<Double>)
  fullName: MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Length3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 59
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Length3D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Length3D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Length3D*
  nameWithType.vb: Vector.Length3D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Length3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Length3D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Length4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Length4D(Vector256<Double>)
  nameWithType: Vector.Length4D(Vector256<Double>)
  fullName: MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Length4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 63
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Length4D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Length4D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Length4D*
  nameWithType.vb: Vector.Length4D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Length4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Length4D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: LengthSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared2D(Vector256<Double>)
  nameWithType: Vector.LengthSquared2D(Vector256<Double>)
  fullName: MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LengthSquared2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 71
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> LengthSquared2D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function LengthSquared2D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.LengthSquared2D*
  nameWithType.vb: Vector.LengthSquared2D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.LengthSquared2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: LengthSquared2D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: LengthSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared3D(Vector256<Double>)
  nameWithType: Vector.LengthSquared3D(Vector256<Double>)
  fullName: MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LengthSquared3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 75
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> LengthSquared3D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function LengthSquared3D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.LengthSquared3D*
  nameWithType.vb: Vector.LengthSquared3D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.LengthSquared3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: LengthSquared3D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: LengthSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared4D(Vector256<Double>)
  nameWithType: Vector.LengthSquared4D(Vector256<Double>)
  fullName: MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LengthSquared4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 79
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> LengthSquared4D(in Vector256<double> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function LengthSquared4D(ByRef vector As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.LengthSquared4D*
  nameWithType.vb: Vector.LengthSquared4D(ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.LengthSquared4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: LengthSquared4D(ByRef Vector256(Of Double))
- uid: MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: DotProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DotProduct2D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.DotProduct2D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DotProduct2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 88
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> DotProduct2D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function DotProduct2D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.DotProduct2D*
  nameWithType.vb: Vector.DotProduct2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DotProduct2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: DotProduct2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: DotProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DotProduct3D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.DotProduct3D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DotProduct3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 116
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> DotProduct3D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function DotProduct3D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.DotProduct3D*
  nameWithType.vb: Vector.DotProduct3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DotProduct3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: DotProduct3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: DotProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DotProduct4D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.DotProduct4D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DotProduct4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 141
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> DotProduct4D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function DotProduct4D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.DotProduct4D*
  nameWithType.vb: Vector.DotProduct4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DotProduct4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: DotProduct4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CrossProduct2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct2D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CrossProduct2D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CrossProduct2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 166
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CrossProduct2D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CrossProduct2D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CrossProduct2D*
  nameWithType.vb: Vector.CrossProduct2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CrossProduct2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CrossProduct2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CrossProduct3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct3D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CrossProduct3D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CrossProduct3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 197
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CrossProduct3D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CrossProduct3D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CrossProduct3D*
  nameWithType.vb: Vector.CrossProduct3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CrossProduct3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CrossProduct3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: CrossProduct4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct4D(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.CrossProduct4D(Vector256<Double>, Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CrossProduct4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 255
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> CrossProduct4D(in Vector256<double> one, in Vector256<double> two, in Vector256<double> three)
    parameters:
    - id: one
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: two
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: three
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function CrossProduct4D(ByRef one As Vector256(Of Double), ByRef two As Vector256(Of Double), ByRef three As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.CrossProduct4D*
  nameWithType.vb: Vector.CrossProduct4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CrossProduct4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: CrossProduct4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Distance2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Distance2D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Distance2D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Distance2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 267
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Distance2D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Distance2D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Distance2D*
  nameWithType.vb: Vector.Distance2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Distance2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Distance2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Distance3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Distance3D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Distance3D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Distance3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 272
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Distance3D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Distance3D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Distance3D*
  nameWithType.vb: Vector.Distance3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Distance3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Distance3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Distance4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Distance4D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Distance4D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Distance4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 278
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Distance4D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Distance4D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Distance4D*
  nameWithType.vb: Vector.Distance4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Distance4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Distance4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: DistanceSquared2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DistanceSquared2D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.DistanceSquared2D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DistanceSquared2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 286
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> DistanceSquared2D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function DistanceSquared2D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.DistanceSquared2D*
  nameWithType.vb: Vector.DistanceSquared2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DistanceSquared2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: DistanceSquared2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: DistanceSquared3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DistanceSquared3D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.DistanceSquared3D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DistanceSquared3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 290
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> DistanceSquared3D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function DistanceSquared3D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.DistanceSquared3D*
  nameWithType.vb: Vector.DistanceSquared3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DistanceSquared3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: DistanceSquared3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: DistanceSquared4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DistanceSquared4D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.DistanceSquared4D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DistanceSquared4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 296
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> DistanceSquared4D(in Vector256<double> left, in Vector256<double> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: right
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function DistanceSquared4D(ByRef left As Vector256(Of Double), ByRef right As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.DistanceSquared4D*
  nameWithType.vb: Vector.DistanceSquared4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DistanceSquared4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: DistanceSquared4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  commentId: M:MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  id: Lerp(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@,System.Double)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Lerp(Vector256<Double>, Vector256<Double>, Double)
  nameWithType: Vector.Lerp(Vector256<Double>, Vector256<Double>, Double)
  fullName: MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Lerp
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 304
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Lerp(in Vector256<double> from, in Vector256<double> to, double weight)
    parameters:
    - id: from
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: to
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: weight
      type: System.Double
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Lerp(ByRef from As Vector256(Of Double), ByRef to As Vector256(Of Double), weight As Double) As Vector256(Of Double)
  overload: MathSharp.Vector.Lerp*
  nameWithType.vb: Vector.Lerp(ByRef Vector256(Of Double), ByRef Vector256(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Lerp(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), System.Double)
  name.vb: Lerp(ByRef Vector256(Of Double), ByRef Vector256(Of Double), Double)
- uid: MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Reflect2D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Reflect2D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Reflect2D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Reflect2D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 320
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Reflect2D(in Vector256<double> incident, in Vector256<double> normal)
    parameters:
    - id: incident
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: normal
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Reflect2D(ByRef incident As Vector256(Of Double), ByRef normal As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Reflect2D*
  nameWithType.vb: Vector.Reflect2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Reflect2D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Reflect2D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Reflect3D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Reflect3D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Reflect3D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Reflect3D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 329
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Reflect3D(in Vector256<double> incident, in Vector256<double> normal)
    parameters:
    - id: incident
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: normal
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Reflect3D(ByRef incident As Vector256(Of Double), ByRef normal As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Reflect3D*
  nameWithType.vb: Vector.Reflect3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Reflect3D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Reflect3D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  commentId: M:MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  id: Reflect4D(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Reflect4D(Vector256<Double>, Vector256<Double>)
  nameWithType: Vector.Reflect4D(Vector256<Double>, Vector256<Double>)
  fullName: MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector256<System.Double>, System.Runtime.Intrinsics.Vector256<System.Double>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Reflect4D
    path: Vector/VectorFloatingPoint/VectorDouble/VectorOperations.cs
    startLine: 338
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector256<double> Reflect4D(in Vector256<double> incident, in Vector256<double> normal)
    parameters:
    - id: incident
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    - id: normal
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    return:
      type: System.Runtime.Intrinsics.Vector256{System.Double}
    content.vb: Public Shared Function Reflect4D(ByRef incident As Vector256(Of Double), ByRef normal As Vector256(Of Double)) As Vector256(Of Double)
  overload: MathSharp.Vector.Reflect4D*
  nameWithType.vb: Vector.Reflect4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Reflect4D(ByRef System.Runtime.Intrinsics.Vector256(Of System.Double), ByRef System.Runtime.Intrinsics.Vector256(Of System.Double))
  name.vb: Reflect4D(ByRef Vector256(Of Double), ByRef Vector256(Of Double))
- uid: MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: FusedMultiplyAdd(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.FusedMultiplyAdd(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: FusedMultiplyAdd
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 21
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> FusedMultiplyAdd(Vector128<float> x, Vector128<float> y, Vector128<float> z)
    parameters:
    - id: x
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: y
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: z
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function FusedMultiplyAdd(x As Vector128(Of Single), y As Vector128(Of Single), z As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.FusedMultiplyAdd*
  nameWithType.vb: Vector.FusedMultiplyAdd(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: FusedMultiplyAdd(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: FastMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: FastMultiplyAdd(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.FastMultiplyAdd(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: FastMultiplyAdd
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 42
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> FastMultiplyAdd(Vector128<float> x, Vector128<float> y, Vector128<float> z)
    parameters:
    - id: x
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: y
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: z
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function FastMultiplyAdd(x As Vector128(Of Single), y As Vector128(Of Single), z As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.FastMultiplyAdd*
  nameWithType.vb: Vector.FastMultiplyAdd(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.FastMultiplyAdd(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: FastMultiplyAdd(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Abs(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Abs(Vector128<Single>)
  nameWithType: Vector.Abs(Vector128<Single>)
  fullName: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Abs
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 53
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Abs(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Abs(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Abs*
  nameWithType.vb: Vector.Abs(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Abs(Vector128(Of Single))
- uid: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: HorizontalAdd(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.HorizontalAdd(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: HorizontalAdd
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 58
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> HorizontalAdd(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function HorizontalAdd(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.HorizontalAdd*
  nameWithType.vb: Vector.HorizontalAdd(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: HorizontalAdd(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Add(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 95
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Add(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Add(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Add(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  id: Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector128<Single>, Single)
  nameWithType: Vector.Add(Vector128<Single>, Single)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 107
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Add(Vector128<float> vector, float scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: scalar
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Add(vector As Vector128(Of Single), scalar As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(Vector128(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single)
  name.vb: Add(Vector128(Of Single), Single)
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Subtract(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 112
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Subtract(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Subtract(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Subtract(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  id: Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector128<Single>, Single)
  nameWithType: Vector.Subtract(Vector128<Single>, Single)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 124
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Subtract(Vector128<float> vector, float scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: scalar
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Subtract(vector As Vector128(Of Single), scalar As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(Vector128(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single)
  name.vb: Subtract(Vector128(Of Single), Single)
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Multiply(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 129
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Multiply(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Multiply(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Multiply(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  id: Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector128<Single>, Single)
  nameWithType: Vector.Multiply(Vector128<Single>, Single)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 140
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Multiply(Vector128<float> vector, float scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: scalar
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Multiply(vector As Vector128(Of Single), scalar As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(Vector128(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single)
  name.vb: Multiply(Vector128(Of Single), Single)
- uid: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Divide(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Divide
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 145
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Divide(Vector128<float> dividend, Vector128<float> divisor)
    parameters:
    - id: dividend
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: divisor
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Divide(dividend As Vector128(Of Single), divisor As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Divide*
  nameWithType.vb: Vector.Divide(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Divide(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  commentId: M:MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  id: Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector128<Single>, Single)
  nameWithType: Vector.Divide(Vector128<Single>, Single)
  fullName: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Divide
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 157
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Divide(Vector128<float> dividend, float scalarDivisor)
    parameters:
    - id: dividend
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: scalarDivisor
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Divide(dividend As Vector128(Of Single), scalarDivisor As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.Divide*
  nameWithType.vb: Vector.Divide(Vector128(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single)
  name.vb: Divide(Vector128(Of Single), Single)
- uid: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Clamp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Clamp(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Clamp(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Clamp
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 162
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Clamp(Vector128<float> vector, Vector128<float> low, Vector128<float> high)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: low
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: high
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Clamp(vector As Vector128(Of Single), low As Vector128(Of Single), high As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Clamp*
  nameWithType.vb: Vector.Clamp(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Clamp(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Sqrt(Vector128<Single>)
  nameWithType: Vector.Sqrt(Vector128<Single>)
  fullName: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Sqrt
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 171
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Sqrt(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Sqrt(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Sqrt*
  nameWithType.vb: Vector.Sqrt(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Sqrt(Vector128(Of Single))
- uid: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Max(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Max(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Max
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 186
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Max(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Max(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Max*
  nameWithType.vb: Vector.Max(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Max(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Min(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Min(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Min
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 199
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Min(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Min(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Min*
  nameWithType.vb: Vector.Min(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Min(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Negate(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Negate(Vector128<Single>)
  nameWithType: Vector.Negate(Vector128<Single>)
  fullName: MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Negate
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 210
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Negate(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Negate(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Negate*
  nameWithType.vb: Vector.Negate(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Negate(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Negate(Vector128(Of Single))
- uid: MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CopySign(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CopySign(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CopySign(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CopySign
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 214
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CopySign(Vector128<float> sign, Vector128<float> vector)
    parameters:
    - id: sign
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CopySign(sign As Vector128(Of Single), vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CopySign*
  nameWithType.vb: Vector.CopySign(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CopySign(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CopySign(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector128{System.Single})
  id: ExtractSign(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ExtractSign(Vector128<Single>)
  nameWithType: Vector.ExtractSign(Vector128<Single>)
  fullName: MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ExtractSign
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 218
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> ExtractSign(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function ExtractSign(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.ExtractSign*
  nameWithType.vb: Vector.ExtractSign(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ExtractSign(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: ExtractSign(Vector128(Of Single))
- uid: MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector128{System.Single})
  id: ClearSign(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ClearSign(Vector128<Single>)
  nameWithType: Vector.ClearSign(Vector128<Single>)
  fullName: MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ClearSign
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 222
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> ClearSign(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function ClearSign(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.ClearSign*
  nameWithType.vb: Vector.ClearSign(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ClearSign(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: ClearSign(Vector128(Of Single))
- uid: MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Mod2Pi(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Mod2Pi(Vector128<Single>)
  nameWithType: Vector.Mod2Pi(Vector128<Single>)
  fullName: MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Mod2Pi
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 226
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Mod2Pi(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Mod2Pi(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Mod2Pi*
  nameWithType.vb: Vector.Mod2Pi(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Mod2Pi(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Mod2Pi(Vector128(Of Single))
- uid: MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Round(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Round(Vector128<Single>)
  nameWithType: Vector.Round(Vector128<Single>)
  fullName: MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Round
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 237
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Round(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Round(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Round*
  nameWithType.vb: Vector.Round(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Round(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Round(Vector128(Of Single))
- uid: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Remainder(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Remainder(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Remainder
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 260
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Remainder(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Remainder(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Remainder*
  nameWithType.vb: Vector.Remainder(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Remainder(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  commentId: M:MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  id: Remainder(System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Remainder(Vector128<Single>, Single)
  nameWithType: Vector.Remainder(Vector128<Single>, Single)
  fullName: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Remainder
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 271
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Remainder(Vector128<float> left, float right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Remainder(left As Vector128(Of Single), right As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.Remainder*
  nameWithType.vb: Vector.Remainder(Vector128(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Remainder(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single)
  name.vb: Remainder(Vector128(Of Single), Single)
- uid: MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Truncate(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Truncate(Vector128<Single>)
  nameWithType: Vector.Truncate(Vector128<Single>)
  fullName: MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Truncate
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 276
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Truncate(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Truncate(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Truncate*
  nameWithType.vb: Vector.Truncate(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Truncate(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Truncate(Vector128(Of Single))
- uid: MathSharp.Vector.Floor(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Floor(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Floor(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Floor(Vector128<Single>)
  nameWithType: Vector.Floor(Vector128<Single>)
  fullName: MathSharp.Vector.Floor(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Floor
    path: Vector/VectorFloatingPoint/VectorSingle/BasicMaths.cs
    startLine: 311
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Floor(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Floor(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Floor*
  nameWithType.vb: Vector.Floor(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Floor(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Floor(Vector128(Of Single))
- uid: MathSharp.Vector.AllTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.AllTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  id: AllTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: AllTrue(Vector128<Single>)
  nameWithType: Vector.AllTrue(Vector128<Single>)
  fullName: MathSharp.Vector.AllTrue(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: AllTrue
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 14
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static bool AllTrue(this Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AllTrue(vector As Vector128(Of Single)) As Boolean
  overload: MathSharp.Vector.AllTrue*
  nameWithType.vb: Vector.AllTrue(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.AllTrue(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: AllTrue(Vector128(Of Single))
- uid: MathSharp.Vector.AnyTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.AnyTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  id: AnyTrue(System.Runtime.Intrinsics.Vector128{System.Single})
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: AnyTrue(Vector128<Single>)
  nameWithType: Vector.AnyTrue(Vector128<Single>)
  fullName: MathSharp.Vector.AnyTrue(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: AnyTrue
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 19
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static bool AnyTrue(this Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AnyTrue(vector As Vector128(Of Single)) As Boolean
  overload: MathSharp.Vector.AnyTrue*
  nameWithType.vb: Vector.AnyTrue(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.AnyTrue(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: AnyTrue(Vector128(Of Single))
- uid: MathSharp.Vector.AllFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.AllFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  id: AllFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: AllFalse(Vector128<Single>)
  nameWithType: Vector.AllFalse(Vector128<Single>)
  fullName: MathSharp.Vector.AllFalse(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: AllFalse
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 23
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static bool AllFalse(this Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AllFalse(vector As Vector128(Of Single)) As Boolean
  overload: MathSharp.Vector.AllFalse*
  nameWithType.vb: Vector.AllFalse(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.AllFalse(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: AllFalse(Vector128(Of Single))
- uid: MathSharp.Vector.AnyFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.AnyFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  id: AnyFalse(System.Runtime.Intrinsics.Vector128{System.Single})
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: AnyFalse(Vector128<Single>)
  nameWithType: Vector.AnyFalse(Vector128<Single>)
  fullName: MathSharp.Vector.AnyFalse(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: AnyFalse
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 28
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static bool AnyFalse(this Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AnyFalse(vector As Vector128(Of Single)) As Boolean
  overload: MathSharp.Vector.AnyFalse*
  nameWithType.vb: Vector.AnyFalse(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.AnyFalse(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: AnyFalse(Vector128(Of Single))
- uid: MathSharp.Vector.ElementTrue(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  commentId: M:MathSharp.Vector.ElementTrue(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  id: ElementTrue(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ElementTrue(Vector128<Single>, Int32)
  nameWithType: Vector.ElementTrue(Vector128<Single>, Int32)
  fullName: MathSharp.Vector.ElementTrue(System.Runtime.Intrinsics.Vector128<System.Single>, System.Int32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ElementTrue
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 32
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static bool ElementTrue(this Vector128<float> vector, int elem)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: elem
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementTrue(vector As Vector128(Of Single), elem As Integer) As Boolean
  overload: MathSharp.Vector.ElementTrue*
  nameWithType.vb: Vector.ElementTrue(Vector128(Of Single), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ElementTrue(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Int32)
  name.vb: ElementTrue(Vector128(Of Single), Int32)
- uid: MathSharp.Vector.ElementFalse(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  commentId: M:MathSharp.Vector.ElementFalse(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  id: ElementFalse(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ElementFalse(Vector128<Single>, Int32)
  nameWithType: Vector.ElementFalse(Vector128<Single>, Int32)
  fullName: MathSharp.Vector.ElementFalse(System.Runtime.Intrinsics.Vector128<System.Single>, System.Int32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ElementFalse
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 41
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static bool ElementFalse(this Vector128<float> vector, int elem)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: elem
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementFalse(vector As Vector128(Of Single), elem As Integer) As Boolean
  overload: MathSharp.Vector.ElementFalse*
  nameWithType.vb: Vector.ElementFalse(Vector128(Of Single), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ElementFalse(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Int32)
  name.vb: ElementFalse(Vector128(Of Single), Int32)
- uid: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareEqual(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CompareEqual(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareEqual
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 49
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CompareEqual(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CompareEqual(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CompareEqual*
  nameWithType.vb: Vector.CompareEqual(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CompareEqual(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareNotEqual(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CompareNotEqual(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareNotEqual
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 61
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CompareNotEqual(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CompareNotEqual(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CompareNotEqual*
  nameWithType.vb: Vector.CompareNotEqual(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CompareNotEqual(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThan(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CompareGreaterThan(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThan
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 73
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CompareGreaterThan(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CompareGreaterThan(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CompareGreaterThan*
  nameWithType.vb: Vector.CompareGreaterThan(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CompareGreaterThan(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThan(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CompareLessThan(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThan
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 85
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CompareLessThan(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CompareLessThan(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CompareLessThan*
  nameWithType.vb: Vector.CompareLessThan(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CompareLessThan(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThanOrEqual(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CompareGreaterThanOrEqual(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThanOrEqual
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 97
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CompareGreaterThanOrEqual(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CompareGreaterThanOrEqual(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CompareGreaterThanOrEqual*
  nameWithType.vb: Vector.CompareGreaterThanOrEqual(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CompareGreaterThanOrEqual(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThanOrEqual(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CompareLessThanOrEqual(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThanOrEqual
    path: Vector/VectorFloatingPoint/VectorSingle/Comparisons.cs
    startLine: 109
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CompareLessThanOrEqual(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CompareLessThanOrEqual(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CompareLessThanOrEqual*
  nameWithType.vb: Vector.CompareLessThanOrEqual(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CompareLessThanOrEqual(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Load4DAligned(System.Single*)
  commentId: M:MathSharp.Vector.Load4DAligned(System.Single*)
  id: Load4DAligned(System.Single*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load4DAligned(Single*)
  nameWithType: Vector.Load4DAligned(Single*)
  fullName: MathSharp.Vector.Load4DAligned(System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load4DAligned
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 14
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load4DAligned(float *p)
    parameters:
    - id: p
      type: System.Single*
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Load4DAligned(p As Single *) As Vector128(Of Single)
  overload: MathSharp.Vector.Load4DAligned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load3DAligned(System.Single*)
  commentId: M:MathSharp.Vector.Load3DAligned(System.Single*)
  id: Load3DAligned(System.Single*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load3DAligned(Single*)
  nameWithType: Vector.Load3DAligned(Single*)
  fullName: MathSharp.Vector.Load3DAligned(System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load3DAligned
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 17
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load3DAligned(float *p)
    parameters:
    - id: p
      type: System.Single*
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Load3DAligned(p As Single *) As Vector128(Of Single)
  overload: MathSharp.Vector.Load3DAligned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load2DAligned(System.Single*)
  commentId: M:MathSharp.Vector.Load2DAligned(System.Single*)
  id: Load2DAligned(System.Single*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load2DAligned(Single*)
  nameWithType: Vector.Load2DAligned(Single*)
  fullName: MathSharp.Vector.Load2DAligned(System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load2DAligned
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 20
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load2DAligned(float *p)
    parameters:
    - id: p
      type: System.Single*
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Load2DAligned(p As Single *) As Vector128(Of Single)
  overload: MathSharp.Vector.Load2DAligned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load4D(System.Single*)
  commentId: M:MathSharp.Vector.Load4D(System.Single*)
  id: Load4D(System.Single*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load4D(Single*)
  nameWithType: Vector.Load4D(Single*)
  fullName: MathSharp.Vector.Load4D(System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load4D
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 25
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load4D(float *p)
    parameters:
    - id: p
      type: System.Single*
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Load4D(p As Single *) As Vector128(Of Single)
  overload: MathSharp.Vector.Load4D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load3D(System.Single*)
  commentId: M:MathSharp.Vector.Load3D(System.Single*)
  id: Load3D(System.Single*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load3D(Single*)
  nameWithType: Vector.Load3D(Single*)
  fullName: MathSharp.Vector.Load3D(System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load3D
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 41
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load3D(float *p)
    parameters:
    - id: p
      type: System.Single*
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Load3D(p As Single *) As Vector128(Of Single)
  overload: MathSharp.Vector.Load3D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load2D(System.Single*)
  commentId: M:MathSharp.Vector.Load2D(System.Single*)
  id: Load2D(System.Single*)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load2D(Single*)
  nameWithType: Vector.Load2D(Single*)
  fullName: MathSharp.Vector.Load2D(System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load2D
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 61
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load2D(float *p)
    parameters:
    - id: p
      type: System.Single*
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Load2D(p As Single *) As Vector128(Of Single)
  overload: MathSharp.Vector.Load2D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.LoadScalar(System.Single)
  commentId: M:MathSharp.Vector.LoadScalar(System.Single)
  id: LoadScalar(System.Single)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LoadScalar(Single)
  nameWithType: Vector.LoadScalar(Single)
  fullName: MathSharp.Vector.LoadScalar(System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LoadScalar
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 85
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> LoadScalar(this float scalar)
    parameters:
    - id: scalar
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LoadScalar(scalar As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.LoadScalar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.LoadScalarBroadcast(System.Single)
  commentId: M:MathSharp.Vector.LoadScalarBroadcast(System.Single)
  id: LoadScalarBroadcast(System.Single)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LoadScalarBroadcast(Single)
  nameWithType: Vector.LoadScalarBroadcast(Single)
  fullName: MathSharp.Vector.LoadScalarBroadcast(System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LoadScalarBroadcast
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 91
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> LoadScalarBroadcast(this float scalar)
    parameters:
    - id: scalar
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LoadScalarBroadcast(scalar As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.LoadScalarBroadcast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: Store4DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store4DAligned(Vector128<Single>, Single*)
  nameWithType: Vector.Store4DAligned(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store4DAligned
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 101
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store4DAligned(this Vector128<float> vector, float *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store4DAligned(vector As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.Store4DAligned*
  nameWithType.vb: Vector.Store4DAligned(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store4DAligned(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: Store4DAligned(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: Store3DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store3DAligned(Vector128<Single>, Single*)
  nameWithType: Vector.Store3DAligned(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store3DAligned
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 104
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store3DAligned(this Vector128<float> vector, float *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store3DAligned(vector As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.Store3DAligned*
  nameWithType.vb: Vector.Store3DAligned(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store3DAligned(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: Store3DAligned(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: Store2DAligned(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store2DAligned(Vector128<Single>, Single*)
  nameWithType: Vector.Store2DAligned(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store2DAligned
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 107
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store2DAligned(this Vector128<float> vector, float *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store2DAligned(vector As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.Store2DAligned*
  nameWithType.vb: Vector.Store2DAligned(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store2DAligned(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: Store2DAligned(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: Store4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store4D(Vector128<Single>, Single*)
  nameWithType: Vector.Store4D(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store4D
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 111
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store4D(this Vector128<float> vector, float *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store4D(vector As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.Store4D*
  nameWithType.vb: Vector.Store4D(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store4D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: Store4D(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: Store3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store3D(Vector128<Single>, Single*)
  nameWithType: Vector.Store3D(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store3D
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 131
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store3D(this Vector128<float> vector, float *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store3D(vector As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.Store3D*
  nameWithType.vb: Vector.Store3D(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store3D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: Store3D(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: Store2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store2D(Vector128<Single>, Single*)
  nameWithType: Vector.Store2D(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store2D
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 153
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store2D(this Vector128<float> vector, float *destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store2D(vector As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.Store2D*
  nameWithType.vb: Vector.Store2D(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store2D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: Store2D(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  commentId: M:MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  id: StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: StoreScalar(Vector128<Single>, Single*)
  nameWithType: Vector.StoreScalar(Vector128<Single>, Single*)
  fullName: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128<System.Single>, System.Single*)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: StoreScalar
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 171
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void StoreScalar(this Vector128<float> scalar, float *destination)
    parameters:
    - id: scalar
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single*
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub StoreScalar(scalar As Vector128(Of Single), destination As Single *)
  overload: MathSharp.Vector.StoreScalar*
  nameWithType.vb: Vector.StoreScalar(Vector128(Of Single), Single*)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single*)
  name.vb: StoreScalar(Vector128(Of Single), Single*)
- uid: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  commentId: M:MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  id: StoreScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: StoreScalar(Vector128<Single>, out Single)
  nameWithType: Vector.StoreScalar(Vector128<Single>, out Single)
  fullName: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: StoreScalar
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 177
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void StoreScalar(this Vector128<float> scalar, out float destination)
    parameters:
    - id: scalar
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub StoreScalar(scalar As Vector128(Of Single), ByRef destination As Single)
  overload: MathSharp.Vector.StoreScalar*
  nameWithType.vb: Vector.StoreScalar(Vector128(Of Single), ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.StoreScalar(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Single)
  name.vb: StoreScalar(Vector128(Of Single), ByRef Single)
- uid: MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector128{System.Single})
  id: ScalarToVector(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: ScalarToVector(Vector128<Single>)
  nameWithType: Vector.ScalarToVector(Vector128<Single>)
  fullName: MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: ScalarToVector
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.cs
    startLine: 187
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> ScalarToVector(Vector128<float> scalar)
    parameters:
    - id: scalar
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function ScalarToVector(scalar As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.ScalarToVector*
  nameWithType.vb: Vector.ScalarToVector(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.ScalarToVector(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: ScalarToVector(Vector128(Of Single))
- uid: MathSharp.Vector.Load(System.Numerics.Vector4)
  commentId: M:MathSharp.Vector.Load(System.Numerics.Vector4)
  id: Load(System.Numerics.Vector4)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load(Vector4)
  nameWithType: Vector.Load(Vector4)
  fullName: MathSharp.Vector.Load(System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 10
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load(this Vector4 vector)
    parameters:
    - id: vector
      type: System.Numerics.Vector4
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Load(vector As Vector4) As Vector128(Of Single)
  overload: MathSharp.Vector.Load*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load(System.Numerics.Vector3)
  commentId: M:MathSharp.Vector.Load(System.Numerics.Vector3)
  id: Load(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load(Vector3)
  nameWithType: Vector.Load(Vector3)
  fullName: MathSharp.Vector.Load(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 16
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load(this Vector3 vector)
    parameters:
    - id: vector
      type: System.Numerics.Vector3
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Load(vector As Vector3) As Vector128(Of Single)
  overload: MathSharp.Vector.Load*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Load(System.Numerics.Vector2)
  commentId: M:MathSharp.Vector.Load(System.Numerics.Vector2)
  id: Load(System.Numerics.Vector2)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Load(Vector2)
  nameWithType: Vector.Load(Vector2)
  fullName: MathSharp.Vector.Load(System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Load
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 22
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Load(this Vector2 vector)
    parameters:
    - id: vector
      type: System.Numerics.Vector2
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Load(vector As Vector2) As Vector128(Of Single)
  overload: MathSharp.Vector.Load*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector4@)
  commentId: M:MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector4@)
  id: Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector4@)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store(Vector128<Single>, out Vector4)
  nameWithType: Vector.Store(Vector128<Single>, out Vector4)
  fullName: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 28
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store(this Vector128<float> vector, out Vector4 destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Numerics.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store(vector As Vector128(Of Single), ByRef destination As Vector4)
  overload: MathSharp.Vector.Store*
  nameWithType.vb: Vector.Store(Vector128(Of Single), ByRef Vector4)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Numerics.Vector4)
  name.vb: Store(Vector128(Of Single), ByRef Vector4)
- uid: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector3@)
  commentId: M:MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector3@)
  id: Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector3@)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store(Vector128<Single>, out Vector3)
  nameWithType: Vector.Store(Vector128<Single>, out Vector3)
  fullName: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 36
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store(this Vector128<float> vector, out Vector3 destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Numerics.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store(vector As Vector128(Of Single), ByRef destination As Vector3)
  overload: MathSharp.Vector.Store*
  nameWithType.vb: Vector.Store(Vector128(Of Single), ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Numerics.Vector3)
  name.vb: Store(Vector128(Of Single), ByRef Vector3)
- uid: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector2@)
  commentId: M:MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector2@)
  id: Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Numerics.Vector2@)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store(Vector128<Single>, out Vector2)
  nameWithType: Vector.Store(Vector128<Single>, out Vector2)
  fullName: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 44
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store(this Vector128<float> vector, out Vector2 destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Numerics.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store(vector As Vector128(Of Single), ByRef destination As Vector2)
  overload: MathSharp.Vector.Store*
  nameWithType.vb: Vector.Store(Vector128(Of Single), ByRef Vector2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Numerics.Vector2)
  name.vb: Store(Vector128(Of Single), ByRef Vector2)
- uid: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  commentId: M:MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  id: Store(System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)
  isExtensionMethod: true
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Store(Vector128<Single>, out Single)
  nameWithType: Vector.Store(Vector128<Single>, out Single)
  fullName: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Store
    path: Vector/VectorFloatingPoint/VectorSingle/Conversions.SystemNumerics.cs
    startLine: 52
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void Store(this Vector128<float> vector, out float destination)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: destination
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Store(vector As Vector128(Of Single), ByRef destination As Single)
  overload: MathSharp.Vector.Store*
  nameWithType.vb: Vector.Store(Vector128(Of Single), ByRef Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Store(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Single)
  name.vb: Store(Vector128(Of Single), ByRef Single)
- uid: MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  commentId: M:MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  id: Permute(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Permute(Vector128<Single>, Byte)
  nameWithType: Vector.Permute(Vector128<Single>, Byte)
  fullName: MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector128<System.Single>, System.Byte)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Permute
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 14
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Permute(Vector128<float> vector, byte control)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: control
      type: System.Byte
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Permute(vector As Vector128(Of Single), control As Byte) As Vector128(Of Single)
  overload: MathSharp.Vector.Permute*
  nameWithType.vb: Vector.Permute(Vector128(Of Single), Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Permute(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Byte)
  name.vb: Permute(Vector128(Of Single), Byte)
- uid: MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector128{System.Single})
  id: PermuteWithX(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithX(Vector128<Single>)
  nameWithType: Vector.PermuteWithX(Vector128<Single>)
  fullName: MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithX
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 25
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> PermuteWithX(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function PermuteWithX(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.PermuteWithX*
  nameWithType.vb: Vector.PermuteWithX(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithX(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: PermuteWithX(Vector128(Of Single))
- uid: MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector128{System.Single})
  id: PermuteWithY(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithY(Vector128<Single>)
  nameWithType: Vector.PermuteWithY(Vector128<Single>)
  fullName: MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithY
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 29
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> PermuteWithY(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function PermuteWithY(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.PermuteWithY*
  nameWithType.vb: Vector.PermuteWithY(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithY(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: PermuteWithY(Vector128(Of Single))
- uid: MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector128{System.Single})
  id: PermuteWithZ(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithZ(Vector128<Single>)
  nameWithType: Vector.PermuteWithZ(Vector128<Single>)
  fullName: MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithZ
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 33
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> PermuteWithZ(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function PermuteWithZ(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.PermuteWithZ*
  nameWithType.vb: Vector.PermuteWithZ(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithZ(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: PermuteWithZ(Vector128(Of Single))
- uid: MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector128{System.Single})
  id: PermuteWithW(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: PermuteWithW(Vector128<Single>)
  nameWithType: Vector.PermuteWithW(Vector128<Single>)
  fullName: MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: PermuteWithW
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 37
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> PermuteWithW(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function PermuteWithW(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.PermuteWithW*
  nameWithType.vb: Vector.PermuteWithW(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.PermuteWithW(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: PermuteWithW(Vector128(Of Single))
- uid: MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  commentId: M:MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  id: Shuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Shuffle(Vector128<Single>, Vector128<Single>, Byte)
  nameWithType: Vector.Shuffle(Vector128<Single>, Vector128<Single>, Byte)
  fullName: MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>, System.Byte)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Shuffle
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 41
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Shuffle(Vector128<float> left, Vector128<float> right, byte control)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: control
      type: System.Byte
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Shuffle(left As Vector128(Of Single), right As Vector128(Of Single), control As Byte) As Vector128(Of Single)
  overload: MathSharp.Vector.Shuffle*
  nameWithType.vb: Vector.Shuffle(Vector128(Of Single), Vector128(Of Single), Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Shuffle(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single), System.Byte)
  name.vb: Shuffle(Vector128(Of Single), Vector128(Of Single), Byte)
- uid: MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector128{System.Single})
  id: MoveMask(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: MoveMask(Vector128<Single>)
  nameWithType: Vector.MoveMask(Vector128<Single>)
  fullName: MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Logical.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: MoveMask
    path: Vector/VectorFloatingPoint/VectorSingle/Logical.cs
    startLine: 52
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static byte MoveMask(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Byte
    content.vb: Public Shared Function MoveMask(vector As Vector128(Of Single)) As Byte
  overload: MathSharp.Vector.MoveMask*
  nameWithType.vb: Vector.MoveMask(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.MoveMask(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: MoveMask(Vector128(Of Single))
- uid: MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Sin(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Sin(Vector128<Single>)
  nameWithType: Vector.Sin(Vector128<Single>)
  fullName: MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Sin
    path: Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
    startLine: 18
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Sin(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Sin(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Sin*
  nameWithType.vb: Vector.Sin(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Sin(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Sin(Vector128(Of Single))
- uid: MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  id: SinEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SinEstimate(Vector128<Single>)
  nameWithType: Vector.SinEstimate(Vector128<Single>)
  fullName: MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SinEstimate
    path: Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
    startLine: 76
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> SinEstimate(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function SinEstimate(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.SinEstimate*
  nameWithType.vb: Vector.SinEstimate(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SinEstimate(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: SinEstimate(Vector128(Of Single))
- uid: MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Cos(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Cos(Vector128<Single>)
  nameWithType: Vector.Cos(Vector128<Single>)
  fullName: MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Cos
    path: Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
    startLine: 122
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Cos(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Cos(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Cos*
  nameWithType.vb: Vector.Cos(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Cos(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Cos(Vector128(Of Single))
- uid: MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  id: CosEstimate(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CosEstimate(Vector128<Single>)
  nameWithType: Vector.CosEstimate(Vector128<Single>)
  fullName: MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CosEstimate
    path: Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
    startLine: 183
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CosEstimate(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CosEstimate(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CosEstimate*
  nameWithType.vb: Vector.CosEstimate(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CosEstimate(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CosEstimate(Vector128(Of Single))
- uid: MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  commentId: M:MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  id: SinCos(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SinCos(Vector128<Single>, out Vector128<Single>, out Vector128<Single>)
  nameWithType: Vector.SinCos(Vector128<Single>, out Vector128<Single>, out Vector128<Single>)
  fullName: MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Runtime.Intrinsics.Vector128<System.Single>, out System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SinCos
    path: Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
    startLine: 228
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void SinCos(Vector128<float> vector, out Vector128<float> sin, out Vector128<float> cos)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: sin
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: cos
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Sub SinCos(vector As Vector128(Of Single), ByRef sin As Vector128(Of Single), ByRef cos As Vector128(Of Single))
  overload: MathSharp.Vector.SinCos*
  nameWithType.vb: Vector.SinCos(Vector128(Of Single), ByRef Vector128(Of Single), ByRef Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SinCos(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: SinCos(Vector128(Of Single), ByRef Vector128(Of Single), ByRef Vector128(Of Single))
- uid: MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  commentId: M:MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  id: SinCosEstimate(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: SinCosEstimate(Vector128<Single>, out Vector128<Single>, out Vector128<Single>)
  nameWithType: Vector.SinCosEstimate(Vector128<Single>, out Vector128<Single>, out Vector128<Single>)
  fullName: MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector128<System.Single>, out System.Runtime.Intrinsics.Vector128<System.Single>, out System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: SinCosEstimate
    path: Vector/VectorFloatingPoint/VectorSingle/Trigonometry.cs
    startLine: 308
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static void SinCosEstimate(Vector128<float> vector, out Vector128<float> sin, out Vector128<float> cos)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: sin
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: cos
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Sub SinCosEstimate(vector As Vector128(Of Single), ByRef sin As Vector128(Of Single), ByRef cos As Vector128(Of Single))
  overload: MathSharp.Vector.SinCosEstimate*
  nameWithType.vb: Vector.SinCosEstimate(Vector128(Of Single), ByRef Vector128(Of Single), ByRef Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.SinCosEstimate(System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Runtime.Intrinsics.Vector128(Of System.Single), ByRef System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: SinCosEstimate(Vector128(Of Single), ByRef Vector128(Of Single), ByRef Vector128(Of Single))
- uid: MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Normalize2D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Normalize2D(Vector128<Single>)
  nameWithType: Vector.Normalize2D(Vector128<Single>)
  fullName: MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Normalize2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 22
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Normalize2D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Normalize2D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Normalize2D*
  nameWithType.vb: Vector.Normalize2D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Normalize2D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Normalize2D(Vector128(Of Single))
- uid: MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Normalize3D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Normalize3D(Vector128<Single>)
  nameWithType: Vector.Normalize3D(Vector128<Single>)
  fullName: MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Normalize3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 26
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Normalize3D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Normalize3D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Normalize3D*
  nameWithType.vb: Vector.Normalize3D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Normalize3D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Normalize3D(Vector128(Of Single))
- uid: MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Normalize4D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Normalize4D(Vector128<Single>)
  nameWithType: Vector.Normalize4D(Vector128<Single>)
  fullName: MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Normalize4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 30
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Normalize4D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Normalize4D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Normalize4D*
  nameWithType.vb: Vector.Normalize4D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Normalize4D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Normalize4D(Vector128(Of Single))
- uid: MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Length2D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Length2D(Vector128<Single>)
  nameWithType: Vector.Length2D(Vector128<Single>)
  fullName: MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Length2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 38
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Length2D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Length2D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Length2D*
  nameWithType.vb: Vector.Length2D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Length2D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Length2D(Vector128(Of Single))
- uid: MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Length3D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Length3D(Vector128<Single>)
  nameWithType: Vector.Length3D(Vector128<Single>)
  fullName: MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Length3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 42
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Length3D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Length3D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Length3D*
  nameWithType.vb: Vector.Length3D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Length3D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Length3D(Vector128(Of Single))
- uid: MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: Length4D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Length4D(Vector128<Single>)
  nameWithType: Vector.Length4D(Vector128<Single>)
  fullName: MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Length4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 46
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Length4D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Length4D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Length4D*
  nameWithType.vb: Vector.Length4D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Length4D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Length4D(Vector128(Of Single))
- uid: MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: LengthSquared2D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared2D(Vector128<Single>)
  nameWithType: Vector.LengthSquared2D(Vector128<Single>)
  fullName: MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LengthSquared2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 54
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> LengthSquared2D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function LengthSquared2D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.LengthSquared2D*
  nameWithType.vb: Vector.LengthSquared2D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.LengthSquared2D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: LengthSquared2D(Vector128(Of Single))
- uid: MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: LengthSquared3D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared3D(Vector128<Single>)
  nameWithType: Vector.LengthSquared3D(Vector128<Single>)
  fullName: MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LengthSquared3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 58
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> LengthSquared3D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function LengthSquared3D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.LengthSquared3D*
  nameWithType.vb: Vector.LengthSquared3D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.LengthSquared3D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: LengthSquared3D(Vector128(Of Single))
- uid: MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector128{System.Single})
  id: LengthSquared4D(System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: LengthSquared4D(Vector128<Single>)
  nameWithType: Vector.LengthSquared4D(Vector128<Single>)
  fullName: MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: LengthSquared4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 62
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> LengthSquared4D(Vector128<float> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function LengthSquared4D(vector As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.LengthSquared4D*
  nameWithType.vb: Vector.LengthSquared4D(Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.LengthSquared4D(System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: LengthSquared4D(Vector128(Of Single))
- uid: MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: DotProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DotProduct2D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.DotProduct2D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DotProduct2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 71
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> DotProduct2D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function DotProduct2D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.DotProduct2D*
  nameWithType.vb: Vector.DotProduct2D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DotProduct2D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: DotProduct2D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: DotProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DotProduct3D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.DotProduct3D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DotProduct3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 114
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> DotProduct3D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function DotProduct3D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.DotProduct3D*
  nameWithType.vb: Vector.DotProduct3D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DotProduct3D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: DotProduct3D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: DotProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DotProduct4D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.DotProduct4D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DotProduct4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 159
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> DotProduct4D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function DotProduct4D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.DotProduct4D*
  nameWithType.vb: Vector.DotProduct4D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DotProduct4D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: DotProduct4D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CrossProduct2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct2D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CrossProduct2D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CrossProduct2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 199
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CrossProduct2D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CrossProduct2D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CrossProduct2D*
  nameWithType.vb: Vector.CrossProduct2D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CrossProduct2D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CrossProduct2D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CrossProduct3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct3D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CrossProduct3D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CrossProduct3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 230
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CrossProduct3D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CrossProduct3D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CrossProduct3D*
  nameWithType.vb: Vector.CrossProduct3D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CrossProduct3D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CrossProduct3D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: CrossProduct4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct4D(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.CrossProduct4D(Vector128<Single>, Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CrossProduct4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 282
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> CrossProduct4D(Vector128<float> one, Vector128<float> two, Vector128<float> three)
    parameters:
    - id: one
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: two
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: three
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function CrossProduct4D(one As Vector128(Of Single), two As Vector128(Of Single), three As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.CrossProduct4D*
  nameWithType.vb: Vector.CrossProduct4D(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CrossProduct4D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: CrossProduct4D(Vector128(Of Single), Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Distance2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Distance2D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Distance2D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Distance2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 294
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Distance2D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Distance2D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Distance2D*
  nameWithType.vb: Vector.Distance2D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Distance2D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Distance2D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Distance3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Distance3D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Distance3D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Distance3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 299
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Distance3D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Distance3D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Distance3D*
  nameWithType.vb: Vector.Distance3D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Distance3D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Distance3D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Distance4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Distance4D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Distance4D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Distance4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 305
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Distance4D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Distance4D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Distance4D*
  nameWithType.vb: Vector.Distance4D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Distance4D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Distance4D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: DistanceSquared2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DistanceSquared2D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.DistanceSquared2D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DistanceSquared2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 313
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> DistanceSquared2D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function DistanceSquared2D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.DistanceSquared2D*
  nameWithType.vb: Vector.DistanceSquared2D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DistanceSquared2D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: DistanceSquared2D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: DistanceSquared3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DistanceSquared3D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.DistanceSquared3D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DistanceSquared3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 317
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> DistanceSquared3D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function DistanceSquared3D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.DistanceSquared3D*
  nameWithType.vb: Vector.DistanceSquared3D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DistanceSquared3D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: DistanceSquared3D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: DistanceSquared4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: DistanceSquared4D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.DistanceSquared4D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: DistanceSquared4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 321
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> DistanceSquared4D(Vector128<float> left, Vector128<float> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function DistanceSquared4D(left As Vector128(Of Single), right As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.DistanceSquared4D*
  nameWithType.vb: Vector.DistanceSquared4D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.DistanceSquared4D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: DistanceSquared4D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  commentId: M:MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  id: Lerp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Single)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Lerp(Vector128<Single>, Vector128<Single>, Single)
  nameWithType: Vector.Lerp(Vector128<Single>, Vector128<Single>, Single)
  fullName: MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Lerp
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 329
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Lerp(Vector128<float> from, Vector128<float> to, float weight)
    parameters:
    - id: from
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: to
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: weight
      type: System.Single
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Lerp(from As Vector128(Of Single), to As Vector128(Of Single), weight As Single) As Vector128(Of Single)
  overload: MathSharp.Vector.Lerp*
  nameWithType.vb: Vector.Lerp(Vector128(Of Single), Vector128(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Lerp(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single), System.Single)
  name.vb: Lerp(Vector128(Of Single), Vector128(Of Single), Single)
- uid: MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Reflect2D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Reflect2D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Reflect2D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Reflect2D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 345
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Reflect2D(Vector128<float> incident, Vector128<float> normal)
    parameters:
    - id: incident
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: normal
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Reflect2D(incident As Vector128(Of Single), normal As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Reflect2D*
  nameWithType.vb: Vector.Reflect2D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Reflect2D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Reflect2D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Reflect3D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Reflect3D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Reflect3D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Reflect3D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 354
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Reflect3D(Vector128<float> incident, Vector128<float> normal)
    parameters:
    - id: incident
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: normal
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Reflect3D(incident As Vector128(Of Single), normal As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Reflect3D*
  nameWithType.vb: Vector.Reflect3D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Reflect3D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Reflect3D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  commentId: M:MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  id: Reflect4D(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Reflect4D(Vector128<Single>, Vector128<Single>)
  nameWithType: Vector.Reflect4D(Vector128<Single>, Vector128<Single>)
  fullName: MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector128<System.Single>, System.Runtime.Intrinsics.Vector128<System.Single>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Reflect4D
    path: Vector/VectorFloatingPoint/VectorSingle/VectorOperations.cs
    startLine: 363
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<float> Reflect4D(Vector128<float> incident, Vector128<float> normal)
    parameters:
    - id: incident
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    - id: normal
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Single}
    content.vb: Public Shared Function Reflect4D(incident As Vector128(Of Single), normal As Vector128(Of Single)) As Vector128(Of Single)
  overload: MathSharp.Vector.Reflect4D*
  nameWithType.vb: Vector.Reflect4D(Vector128(Of Single), Vector128(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Reflect4D(System.Runtime.Intrinsics.Vector128(Of System.Single), System.Runtime.Intrinsics.Vector128(Of System.Single))
  name.vb: Reflect4D(Vector128(Of Single), Vector128(Of Single))
- uid: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Abs(System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Abs(Vector128<Int32>)
  nameWithType: Vector.Abs(Vector128<Int32>)
  fullName: MathSharp.Vector.Abs(System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Abs
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 16
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Abs(in Vector128<int> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Abs(ByRef vector As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Abs*
  nameWithType.vb: Vector.Abs(ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Abs(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Abs(ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: HorizontalAdd(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.HorizontalAdd(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: HorizontalAdd
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 21
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> HorizontalAdd(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function HorizontalAdd(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.HorizontalAdd*
  nameWithType.vb: Vector.HorizontalAdd(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.HorizontalAdd(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: HorizontalAdd(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.Add(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 35
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Add(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Add(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Add(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  id: Add(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector128<Int32>, Int32)
  nameWithType: Vector.Add(Vector128<Int32>, Int32)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Int32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 47
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Add(in Vector128<int> vector, int scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: scalar
      type: System.Int32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Add(ByRef vector As Vector128(Of Integer), scalar As Integer) As Vector128(Of Integer)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(ByRef Vector128(Of Int32), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), System.Int32)
  name.vb: Add(ByRef Vector128(Of Int32), Int32)
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.Subtract(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 52
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Subtract(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Subtract(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Subtract(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  id: Subtract(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector128<Int32>, Int32)
  nameWithType: Vector.Subtract(Vector128<Int32>, Int32)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Int32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 64
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Subtract(in Vector128<int> vector, int scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: scalar
      type: System.Int32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Subtract(ByRef vector As Vector128(Of Integer), scalar As Integer) As Vector128(Of Integer)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(ByRef Vector128(Of Int32), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), System.Int32)
  name.vb: Subtract(ByRef Vector128(Of Int32), Int32)
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.Multiply(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 77
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Multiply(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Multiply(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Multiply(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  id: Multiply(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Int32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector128<Int32>, Int32)
  nameWithType: Vector.Multiply(Vector128<Int32>, Int32)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Int32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 94
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Multiply(in Vector128<int> left, int scalar)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: scalar
      type: System.Int32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Multiply(ByRef left As Vector128(Of Integer), scalar As Integer) As Vector128(Of Integer)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(ByRef Vector128(Of Int32), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), System.Int32)
  name.vb: Multiply(ByRef Vector128(Of Int32), Int32)
- uid: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Clamp(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Clamp(Vector128<Int32>, Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.Clamp(Vector128<Int32>, Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Clamp
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 111
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Clamp(in Vector128<int> vector, in Vector128<int> low, in Vector128<int> high)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: low
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: high
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Clamp(ByRef vector As Vector128(Of Integer), ByRef low As Vector128(Of Integer), ByRef high As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Clamp*
  nameWithType.vb: Vector.Clamp(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Clamp(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Clamp(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Max(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Max(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.Max(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Max
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 119
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Max(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Max(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Max*
  nameWithType.vb: Vector.Max(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Max(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Max(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: Min(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Min(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.Min(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Min
    path: Vector/VectorInteger/VectorInt32/BasicMaths.cs
    startLine: 132
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> Min(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function Min(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.Min*
  nameWithType.vb: Vector.Min(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Min(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: Min(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareEqual(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.CompareEqual(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareEqual
    path: Vector/VectorInteger/VectorInt32/Comparisons.cs
    startLine: 14
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> CompareEqual(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function CompareEqual(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.CompareEqual*
  nameWithType.vb: Vector.CompareEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: CompareEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareNotEqual(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.CompareNotEqual(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareNotEqual
    path: Vector/VectorInteger/VectorInt32/Comparisons.cs
    startLine: 26
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> CompareNotEqual(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function CompareNotEqual(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.CompareNotEqual*
  nameWithType.vb: Vector.CompareNotEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareNotEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: CompareNotEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThan(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.CompareGreaterThan(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThan
    path: Vector/VectorInteger/VectorInt32/Comparisons.cs
    startLine: 39
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> CompareGreaterThan(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function CompareGreaterThan(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.CompareGreaterThan*
  nameWithType.vb: Vector.CompareGreaterThan(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThan(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: CompareGreaterThan(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThan(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.CompareLessThan(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThan
    path: Vector/VectorInteger/VectorInt32/Comparisons.cs
    startLine: 51
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> CompareLessThan(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function CompareLessThan(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.CompareLessThan*
  nameWithType.vb: Vector.CompareLessThan(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThan(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: CompareLessThan(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThanOrEqual(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.CompareGreaterThanOrEqual(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThanOrEqual
    path: Vector/VectorInteger/VectorInt32/Comparisons.cs
    startLine: 63
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> CompareGreaterThanOrEqual(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function CompareGreaterThanOrEqual(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.CompareGreaterThanOrEqual*
  nameWithType.vb: Vector.CompareGreaterThanOrEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThanOrEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: CompareGreaterThanOrEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  commentId: M:MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  id: CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThanOrEqual(Vector128<Int32>, Vector128<Int32>)
  nameWithType: Vector.CompareLessThanOrEqual(Vector128<Int32>, Vector128<Int32>)
  fullName: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128<System.Int32>, System.Runtime.Intrinsics.Vector128<System.Int32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThanOrEqual
    path: Vector/VectorInteger/VectorInt32/Comparisons.cs
    startLine: 76
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<int> CompareLessThanOrEqual(in Vector128<int> left, in Vector128<int> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.Int32}
    content.vb: Public Shared Function CompareLessThanOrEqual(ByRef left As Vector128(Of Integer), ByRef right As Vector128(Of Integer)) As Vector128(Of Integer)
  overload: MathSharp.Vector.CompareLessThanOrEqual*
  nameWithType.vb: Vector.CompareLessThanOrEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThanOrEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32), ByRef System.Runtime.Intrinsics.Vector128(Of System.Int32))
  name.vb: CompareLessThanOrEqual(ByRef Vector128(Of Int32), ByRef Vector128(Of Int32))
- uid: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: HorizontalAdd(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.HorizontalAdd(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.HorizontalAdd(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: HorizontalAdd
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 15
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> HorizontalAdd(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function HorizontalAdd(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.HorizontalAdd*
  nameWithType.vb: Vector.HorizontalAdd(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.HorizontalAdd(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: HorizontalAdd(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Add(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 29
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Add(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Add(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Add(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  commentId: M:MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  id: Add(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Add(Vector128<UInt32>, UInt32)
  nameWithType: Vector.Add(Vector128<UInt32>, UInt32)
  fullName: MathSharp.Vector.Add(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.UInt32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Add
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 41
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Add(in Vector128<uint> vector, uint scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: scalar
      type: System.UInt32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Add(ByRef vector As Vector128(Of UInteger), scalar As UInteger) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Add*
  nameWithType.vb: Vector.Add(ByRef Vector128(Of UInt32), UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Add(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), System.UInt32)
  name.vb: Add(ByRef Vector128(Of UInt32), UInt32)
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Subtract(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 54
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Subtract(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Subtract(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Subtract(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  commentId: M:MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  id: Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Subtract(Vector128<UInt32>, UInt32)
  nameWithType: Vector.Subtract(Vector128<UInt32>, UInt32)
  fullName: MathSharp.Vector.Subtract(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.UInt32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Subtract
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 66
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Subtract(in Vector128<uint> vector, uint scalar)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: scalar
      type: System.UInt32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Subtract(ByRef vector As Vector128(Of UInteger), scalar As UInteger) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Subtract*
  nameWithType.vb: Vector.Subtract(ByRef Vector128(Of UInt32), UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Subtract(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), System.UInt32)
  name.vb: Subtract(ByRef Vector128(Of UInt32), UInt32)
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Multiply(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 79
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Multiply(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Multiply(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Multiply(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  commentId: M:MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  id: Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector128<UInt32>, UInt32)
  nameWithType: Vector.Multiply(Vector128<UInt32>, UInt32)
  fullName: MathSharp.Vector.Multiply(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.UInt32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Multiply
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 96
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Multiply(in Vector128<uint> left, uint scalar)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: scalar
      type: System.UInt32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Multiply(ByRef left As Vector128(Of UInteger), scalar As UInteger) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Multiply*
  nameWithType.vb: Vector.Multiply(ByRef Vector128(Of UInt32), UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Multiply(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), System.UInt32)
  name.vb: Multiply(ByRef Vector128(Of UInt32), UInt32)
- uid: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Divide(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Divide
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 112
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Divide(in Vector128<uint> dividend, in Vector128<uint> divisor)
    parameters:
    - id: dividend
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: divisor
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Divide(ByRef dividend As Vector128(Of UInteger), ByRef divisor As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Divide*
  nameWithType.vb: Vector.Divide(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Divide(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Divide(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  commentId: M:MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  id: Divide(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.UInt32)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Divide(Vector128<UInt32>, UInt32)
  nameWithType: Vector.Divide(Vector128<UInt32>, UInt32)
  fullName: MathSharp.Vector.Divide(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.UInt32)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Divide
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 124
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Divide(in Vector128<uint> dividend, uint scalarDivisor)
    parameters:
    - id: dividend
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: scalarDivisor
      type: System.UInt32
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Divide(ByRef dividend As Vector128(Of UInteger), scalarDivisor As UInteger) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Divide*
  nameWithType.vb: Vector.Divide(ByRef Vector128(Of UInt32), UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Divide(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), System.UInt32)
  name.vb: Divide(ByRef Vector128(Of UInt32), UInt32)
- uid: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Clamp(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Clamp(Vector128<UInt32>, Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Clamp(Vector128<UInt32>, Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Clamp(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Clamp
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 137
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Clamp(in Vector128<uint> vector, in Vector128<uint> low, in Vector128<uint> high)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: low
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: high
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Clamp(ByRef vector As Vector128(Of UInteger), ByRef low As Vector128(Of UInteger), ByRef high As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Clamp*
  nameWithType.vb: Vector.Clamp(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Clamp(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Clamp(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Sqrt(System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Sqrt(Vector128<UInt32>)
  nameWithType: Vector.Sqrt(Vector128<UInt32>)
  fullName: MathSharp.Vector.Sqrt(System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Sqrt
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 150
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Sqrt(in Vector128<uint> vector)
    parameters:
    - id: vector
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Sqrt(ByRef vector As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Sqrt*
  nameWithType.vb: Vector.Sqrt(ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Sqrt(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Sqrt(ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Max(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Max(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Max(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Max(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Max
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 165
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Max(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Max(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Max*
  nameWithType.vb: Vector.Max(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Max(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Max(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: Min(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: Min(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.Min(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.Min(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/BasicMaths.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: Min
    path: Vector/VectorInteger/VectorUInt32/BasicMaths.cs
    startLine: 178
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> Min(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function Min(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.Min*
  nameWithType.vb: Vector.Min(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.Min(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: Min(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareEqual(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.CompareEqual(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.CompareEqual(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareEqual
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 16
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> CompareEqual(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function CompareEqual(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.CompareEqual*
  nameWithType.vb: Vector.CompareEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: CompareEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareNotEqual(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.CompareNotEqual(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.CompareNotEqual(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareNotEqual
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 28
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> CompareNotEqual(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function CompareNotEqual(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.CompareNotEqual*
  nameWithType.vb: Vector.CompareNotEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareNotEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: CompareNotEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThan(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.CompareGreaterThan(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.CompareGreaterThan(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThan
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 41
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> CompareGreaterThan(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function CompareGreaterThan(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.CompareGreaterThan*
  nameWithType.vb: Vector.CompareGreaterThan(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThan(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: CompareGreaterThan(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: CompareLessThan(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThan(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.CompareLessThan(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.CompareLessThan(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThan
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 53
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> CompareLessThan(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function CompareLessThan(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.CompareLessThan*
  nameWithType.vb: Vector.CompareLessThan(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThan(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: CompareLessThan(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareGreaterThanOrEqual(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.CompareGreaterThanOrEqual(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareGreaterThanOrEqual
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 65
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> CompareGreaterThanOrEqual(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function CompareGreaterThanOrEqual(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.CompareGreaterThanOrEqual*
  nameWithType.vb: Vector.CompareGreaterThanOrEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareGreaterThanOrEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: CompareGreaterThanOrEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
- uid: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  commentId: M:MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  id: CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)
  parent: MathSharp.Vector
  langs:
  - csharp
  - vb
  name: CompareLessThanOrEqual(Vector128<UInt32>, Vector128<UInt32>)
  nameWithType: Vector.CompareLessThanOrEqual(Vector128<UInt32>, Vector128<UInt32>)
  fullName: MathSharp.Vector.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128<System.UInt32>, System.Runtime.Intrinsics.Vector128<System.UInt32>)
  type: Method
  source:
    remote:
      path: sources/MathSharp/Vector/VectorInteger/VectorUInt32/Comparisons.cs
      branch: dev-john
      repo: https://github.com/johnkellyoxford/MathSharp.git
    id: CompareLessThanOrEqual
    path: Vector/VectorInteger/VectorUInt32/Comparisons.cs
    startLine: 79
  assemblies:
  - MathSharp
  namespace: MathSharp
  syntax:
    content: public static Vector128<uint> CompareLessThanOrEqual(in Vector128<uint> left, in Vector128<uint> right)
    parameters:
    - id: left
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    - id: right
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    return:
      type: System.Runtime.Intrinsics.Vector128{System.UInt32}
    content.vb: Public Shared Function CompareLessThanOrEqual(ByRef left As Vector128(Of UInteger), ByRef right As Vector128(Of UInteger)) As Vector128(Of UInteger)
  overload: MathSharp.Vector.CompareLessThanOrEqual*
  nameWithType.vb: Vector.CompareLessThanOrEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MathSharp.Vector.CompareLessThanOrEqual(ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32), ByRef System.Runtime.Intrinsics.Vector128(Of System.UInt32))
  name.vb: CompareLessThanOrEqual(ByRef Vector128(Of UInt32), ByRef Vector128(Of UInt32))
references:
- uid: MathSharp
  commentId: N:MathSharp
  name: MathSharp
  nameWithType: MathSharp
  fullName: MathSharp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.Intrinsics.Vector128`1
  commentId: T:System.Runtime.Intrinsics.Vector128`1
  isExternal: true
  name: Vector128<T>
  nameWithType: Vector128<T>
  fullName: System.Runtime.Intrinsics.Vector128<T>
  nameWithType.vb: Vector128(Of T)
  fullName.vb: System.Runtime.Intrinsics.Vector128(Of T)
  name.vb: Vector128(Of T)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MathSharp.Vector.SelectWhereTrue*
  commentId: Overload:MathSharp.Vector.SelectWhereTrue
  name: SelectWhereTrue
  nameWithType: Vector.SelectWhereTrue
  fullName: MathSharp.Vector.SelectWhereTrue
- uid: System.Runtime.Intrinsics.Vector128{{T}}
  commentId: T:System.Runtime.Intrinsics.Vector128{``0}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector128`1
  name: Vector128<T>
  nameWithType: Vector128<T>
  fullName: System.Runtime.Intrinsics.Vector128<T>
  nameWithType.vb: Vector128(Of T)
  fullName.vb: System.Runtime.Intrinsics.Vector128(Of T)
  name.vb: Vector128(Of T)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Intrinsics.Vector128{{U}}
  commentId: T:System.Runtime.Intrinsics.Vector128{``1}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector128`1
  name: Vector128<U>
  nameWithType: Vector128<U>
  fullName: System.Runtime.Intrinsics.Vector128<U>
  nameWithType.vb: Vector128(Of U)
  fullName.vb: System.Runtime.Intrinsics.Vector128(Of U)
  name.vb: Vector128(Of U)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Intrinsics
  commentId: N:System.Runtime.Intrinsics
  isExternal: true
  name: System.Runtime.Intrinsics
  nameWithType: System.Runtime.Intrinsics
  fullName: System.Runtime.Intrinsics
- uid: MathSharp.Vector.SelectWhereFalse*
  commentId: Overload:MathSharp.Vector.SelectWhereFalse
  name: SelectWhereFalse
  nameWithType: Vector.SelectWhereFalse
  fullName: MathSharp.Vector.SelectWhereFalse
- uid: MathSharp.Vector.And*
  commentId: Overload:MathSharp.Vector.And
  name: And
  nameWithType: Vector.And
  fullName: MathSharp.Vector.And
- uid: MathSharp.Vector.Or*
  commentId: Overload:MathSharp.Vector.Or
  name: Or
  nameWithType: Vector.Or
  fullName: MathSharp.Vector.Or
- uid: MathSharp.Vector.Xor*
  commentId: Overload:MathSharp.Vector.Xor
  name: Xor
  nameWithType: Vector.Xor
  fullName: MathSharp.Vector.Xor
- uid: MathSharp.Vector.AndNot*
  commentId: Overload:MathSharp.Vector.AndNot
  name: AndNot
  nameWithType: Vector.AndNot
  fullName: MathSharp.Vector.AndNot
- uid: MathSharp.Vector.Not*
  commentId: Overload:MathSharp.Vector.Not
  name: Not
  nameWithType: Vector.Not
  fullName: MathSharp.Vector.Not
- uid: System.Runtime.Intrinsics.Vector256`1
  commentId: T:System.Runtime.Intrinsics.Vector256`1
  isExternal: true
  name: Vector256<T>
  nameWithType: Vector256<T>
  fullName: System.Runtime.Intrinsics.Vector256<T>
  nameWithType.vb: Vector256(Of T)
  fullName.vb: System.Runtime.Intrinsics.Vector256(Of T)
  name.vb: Vector256(Of T)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Intrinsics.Vector256{{T}}
  commentId: T:System.Runtime.Intrinsics.Vector256{``0}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector256`1
  name: Vector256<T>
  nameWithType: Vector256<T>
  fullName: System.Runtime.Intrinsics.Vector256<T>
  nameWithType.vb: Vector256(Of T)
  fullName.vb: System.Runtime.Intrinsics.Vector256(Of T)
  name.vb: Vector256(Of T)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Intrinsics.Vector256{{U}}
  commentId: T:System.Runtime.Intrinsics.Vector256{``1}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector256`1
  name: Vector256<U>
  nameWithType: Vector256<U>
  fullName: System.Runtime.Intrinsics.Vector256<U>
  nameWithType.vb: Vector256(Of U)
  fullName.vb: System.Runtime.Intrinsics.Vector256(Of U)
  name.vb: Vector256(Of U)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: MathSharp.Vector.FusedMultiplyAdd*
  commentId: Overload:MathSharp.Vector.FusedMultiplyAdd
  name: FusedMultiplyAdd
  nameWithType: Vector.FusedMultiplyAdd
  fullName: MathSharp.Vector.FusedMultiplyAdd
- uid: System.Runtime.Intrinsics.Vector256{System.Double}
  commentId: T:System.Runtime.Intrinsics.Vector256{System.Double}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector256`1
  name: Vector256<Double>
  nameWithType: Vector256<Double>
  fullName: System.Runtime.Intrinsics.Vector256<System.Double>
  nameWithType.vb: Vector256(Of Double)
  fullName.vb: System.Runtime.Intrinsics.Vector256(Of System.Double)
  name.vb: Vector256(Of Double)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector256`1
    name: Vector256
    nameWithType: Vector256
    fullName: System.Runtime.Intrinsics.Vector256
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MathSharp.Vector.FastMultiplyAdd*
  commentId: Overload:MathSharp.Vector.FastMultiplyAdd
  name: FastMultiplyAdd
  nameWithType: Vector.FastMultiplyAdd
  fullName: MathSharp.Vector.FastMultiplyAdd
- uid: MathSharp.Vector.Abs*
  commentId: Overload:MathSharp.Vector.Abs
  name: Abs
  nameWithType: Vector.Abs
  fullName: MathSharp.Vector.Abs
- uid: MathSharp.Vector.HorizontalAdd*
  commentId: Overload:MathSharp.Vector.HorizontalAdd
  name: HorizontalAdd
  nameWithType: Vector.HorizontalAdd
  fullName: MathSharp.Vector.HorizontalAdd
- uid: MathSharp.Vector.Add*
  commentId: Overload:MathSharp.Vector.Add
  name: Add
  nameWithType: Vector.Add
  fullName: MathSharp.Vector.Add
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: MathSharp.Vector.Subtract*
  commentId: Overload:MathSharp.Vector.Subtract
  name: Subtract
  nameWithType: Vector.Subtract
  fullName: MathSharp.Vector.Subtract
- uid: MathSharp.Vector.Multiply*
  commentId: Overload:MathSharp.Vector.Multiply
  name: Multiply
  nameWithType: Vector.Multiply
  fullName: MathSharp.Vector.Multiply
- uid: MathSharp.Vector.Divide*
  commentId: Overload:MathSharp.Vector.Divide
  name: Divide
  nameWithType: Vector.Divide
  fullName: MathSharp.Vector.Divide
- uid: MathSharp.Vector.Clamp*
  commentId: Overload:MathSharp.Vector.Clamp
  name: Clamp
  nameWithType: Vector.Clamp
  fullName: MathSharp.Vector.Clamp
- uid: MathSharp.Vector.Sqrt*
  commentId: Overload:MathSharp.Vector.Sqrt
  name: Sqrt
  nameWithType: Vector.Sqrt
  fullName: MathSharp.Vector.Sqrt
- uid: MathSharp.Vector.Max*
  commentId: Overload:MathSharp.Vector.Max
  name: Max
  nameWithType: Vector.Max
  fullName: MathSharp.Vector.Max
- uid: MathSharp.Vector.Min*
  commentId: Overload:MathSharp.Vector.Min
  name: Min
  nameWithType: Vector.Min
  fullName: MathSharp.Vector.Min
- uid: MathSharp.Vector.Negate*
  commentId: Overload:MathSharp.Vector.Negate
  name: Negate
  nameWithType: Vector.Negate
  fullName: MathSharp.Vector.Negate
- uid: MathSharp.Vector.CopySign*
  commentId: Overload:MathSharp.Vector.CopySign
  name: CopySign
  nameWithType: Vector.CopySign
  fullName: MathSharp.Vector.CopySign
- uid: MathSharp.Vector.ExtractSign*
  commentId: Overload:MathSharp.Vector.ExtractSign
  name: ExtractSign
  nameWithType: Vector.ExtractSign
  fullName: MathSharp.Vector.ExtractSign
- uid: MathSharp.Vector.ClearSign*
  commentId: Overload:MathSharp.Vector.ClearSign
  name: ClearSign
  nameWithType: Vector.ClearSign
  fullName: MathSharp.Vector.ClearSign
- uid: MathSharp.Vector.Mod2Pi*
  commentId: Overload:MathSharp.Vector.Mod2Pi
  name: Mod2Pi
  nameWithType: Vector.Mod2Pi
  fullName: MathSharp.Vector.Mod2Pi
- uid: MathSharp.Vector.Round*
  commentId: Overload:MathSharp.Vector.Round
  name: Round
  nameWithType: Vector.Round
  fullName: MathSharp.Vector.Round
- uid: MathSharp.Vector.Remainder*
  commentId: Overload:MathSharp.Vector.Remainder
  name: Remainder
  nameWithType: Vector.Remainder
  fullName: MathSharp.Vector.Remainder
- uid: MathSharp.Vector.Truncate*
  commentId: Overload:MathSharp.Vector.Truncate
  name: Truncate
  nameWithType: Vector.Truncate
  fullName: MathSharp.Vector.Truncate
- uid: MathSharp.Vector.CompareEqual*
  commentId: Overload:MathSharp.Vector.CompareEqual
  name: CompareEqual
  nameWithType: Vector.CompareEqual
  fullName: MathSharp.Vector.CompareEqual
- uid: MathSharp.Vector.CompareNotEqual*
  commentId: Overload:MathSharp.Vector.CompareNotEqual
  name: CompareNotEqual
  nameWithType: Vector.CompareNotEqual
  fullName: MathSharp.Vector.CompareNotEqual
- uid: MathSharp.Vector.CompareGreaterThan*
  commentId: Overload:MathSharp.Vector.CompareGreaterThan
  name: CompareGreaterThan
  nameWithType: Vector.CompareGreaterThan
  fullName: MathSharp.Vector.CompareGreaterThan
- uid: MathSharp.Vector.CompareLessThan*
  commentId: Overload:MathSharp.Vector.CompareLessThan
  name: CompareLessThan
  nameWithType: Vector.CompareLessThan
  fullName: MathSharp.Vector.CompareLessThan
- uid: MathSharp.Vector.CompareGreaterThanOrEqual*
  commentId: Overload:MathSharp.Vector.CompareGreaterThanOrEqual
  name: CompareGreaterThanOrEqual
  nameWithType: Vector.CompareGreaterThanOrEqual
  fullName: MathSharp.Vector.CompareGreaterThanOrEqual
- uid: MathSharp.Vector.CompareLessThanOrEqual*
  commentId: Overload:MathSharp.Vector.CompareLessThanOrEqual
  name: CompareLessThanOrEqual
  nameWithType: Vector.CompareLessThanOrEqual
  fullName: MathSharp.Vector.CompareLessThanOrEqual
- uid: MathSharp.Vector.Load4DAligned*
  commentId: Overload:MathSharp.Vector.Load4DAligned
  name: Load4DAligned
  nameWithType: Vector.Load4DAligned
  fullName: MathSharp.Vector.Load4DAligned
- uid: System.Double*
  isExternal: true
  name: Double*
  nameWithType: Double*
  fullName: System.Double*
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: MathSharp.Vector.Load3DAligned*
  commentId: Overload:MathSharp.Vector.Load3DAligned
  name: Load3DAligned
  nameWithType: Vector.Load3DAligned
  fullName: MathSharp.Vector.Load3DAligned
- uid: MathSharp.Vector.Load2DAligned*
  commentId: Overload:MathSharp.Vector.Load2DAligned
  name: Load2DAligned
  nameWithType: Vector.Load2DAligned
  fullName: MathSharp.Vector.Load2DAligned
- uid: MathSharp.Vector.Load4D*
  commentId: Overload:MathSharp.Vector.Load4D
  name: Load4D
  nameWithType: Vector.Load4D
  fullName: MathSharp.Vector.Load4D
- uid: MathSharp.Vector.Load3D*
  commentId: Overload:MathSharp.Vector.Load3D
  name: Load3D
  nameWithType: Vector.Load3D
  fullName: MathSharp.Vector.Load3D
- uid: MathSharp.Vector.Load2D*
  commentId: Overload:MathSharp.Vector.Load2D
  name: Load2D
  nameWithType: Vector.Load2D
  fullName: MathSharp.Vector.Load2D
- uid: MathSharp.Vector.LoadScalar*
  commentId: Overload:MathSharp.Vector.LoadScalar
  name: LoadScalar
  nameWithType: Vector.LoadScalar
  fullName: MathSharp.Vector.LoadScalar
- uid: MathSharp.Vector.LoadScalarBroadcast*
  commentId: Overload:MathSharp.Vector.LoadScalarBroadcast
  name: LoadScalarBroadcast
  nameWithType: Vector.LoadScalarBroadcast
  fullName: MathSharp.Vector.LoadScalarBroadcast
- uid: MathSharp.Vector.Store4DAligned*
  commentId: Overload:MathSharp.Vector.Store4DAligned
  name: Store4DAligned
  nameWithType: Vector.Store4DAligned
  fullName: MathSharp.Vector.Store4DAligned
- uid: MathSharp.Vector.Store3DAligned*
  commentId: Overload:MathSharp.Vector.Store3DAligned
  name: Store3DAligned
  nameWithType: Vector.Store3DAligned
  fullName: MathSharp.Vector.Store3DAligned
- uid: MathSharp.Vector.Store2DAligned*
  commentId: Overload:MathSharp.Vector.Store2DAligned
  name: Store2DAligned
  nameWithType: Vector.Store2DAligned
  fullName: MathSharp.Vector.Store2DAligned
- uid: MathSharp.Vector.Store4D*
  commentId: Overload:MathSharp.Vector.Store4D
  name: Store4D
  nameWithType: Vector.Store4D
  fullName: MathSharp.Vector.Store4D
- uid: MathSharp.Vector.Store3D*
  commentId: Overload:MathSharp.Vector.Store3D
  name: Store3D
  nameWithType: Vector.Store3D
  fullName: MathSharp.Vector.Store3D
- uid: MathSharp.Vector.Store2D*
  commentId: Overload:MathSharp.Vector.Store2D
  name: Store2D
  nameWithType: Vector.Store2D
  fullName: MathSharp.Vector.Store2D
- uid: MathSharp.Vector.StoreScalar*
  commentId: Overload:MathSharp.Vector.StoreScalar
  name: StoreScalar
  nameWithType: Vector.StoreScalar
  fullName: MathSharp.Vector.StoreScalar
- uid: MathSharp.Vector.ScalarToVector*
  commentId: Overload:MathSharp.Vector.ScalarToVector
  name: ScalarToVector
  nameWithType: Vector.ScalarToVector
  fullName: MathSharp.Vector.ScalarToVector
- uid: MathSharp.Vector.Permute*
  commentId: Overload:MathSharp.Vector.Permute
  name: Permute
  nameWithType: Vector.Permute
  fullName: MathSharp.Vector.Permute
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: MathSharp.Vector.PermuteWithX*
  commentId: Overload:MathSharp.Vector.PermuteWithX
  name: PermuteWithX
  nameWithType: Vector.PermuteWithX
  fullName: MathSharp.Vector.PermuteWithX
- uid: MathSharp.Vector.PermuteWithY*
  commentId: Overload:MathSharp.Vector.PermuteWithY
  name: PermuteWithY
  nameWithType: Vector.PermuteWithY
  fullName: MathSharp.Vector.PermuteWithY
- uid: MathSharp.Vector.PermuteWithZ*
  commentId: Overload:MathSharp.Vector.PermuteWithZ
  name: PermuteWithZ
  nameWithType: Vector.PermuteWithZ
  fullName: MathSharp.Vector.PermuteWithZ
- uid: MathSharp.Vector.PermuteWithW*
  commentId: Overload:MathSharp.Vector.PermuteWithW
  name: PermuteWithW
  nameWithType: Vector.PermuteWithW
  fullName: MathSharp.Vector.PermuteWithW
- uid: MathSharp.Vector.Shuffle*
  commentId: Overload:MathSharp.Vector.Shuffle
  name: Shuffle
  nameWithType: Vector.Shuffle
  fullName: MathSharp.Vector.Shuffle
- uid: MathSharp.Vector.MoveMask*
  commentId: Overload:MathSharp.Vector.MoveMask
  name: MoveMask
  nameWithType: Vector.MoveMask
  fullName: MathSharp.Vector.MoveMask
- uid: MathSharp.Vector.Sin*
  commentId: Overload:MathSharp.Vector.Sin
  name: Sin
  nameWithType: Vector.Sin
  fullName: MathSharp.Vector.Sin
- uid: MathSharp.Vector.SinEstimate*
  commentId: Overload:MathSharp.Vector.SinEstimate
  name: SinEstimate
  nameWithType: Vector.SinEstimate
  fullName: MathSharp.Vector.SinEstimate
- uid: MathSharp.Vector.Cos*
  commentId: Overload:MathSharp.Vector.Cos
  name: Cos
  nameWithType: Vector.Cos
  fullName: MathSharp.Vector.Cos
- uid: MathSharp.Vector.CosEstimate*
  commentId: Overload:MathSharp.Vector.CosEstimate
  name: CosEstimate
  nameWithType: Vector.CosEstimate
  fullName: MathSharp.Vector.CosEstimate
- uid: MathSharp.Vector.SinCos*
  commentId: Overload:MathSharp.Vector.SinCos
  name: SinCos
  nameWithType: Vector.SinCos
  fullName: MathSharp.Vector.SinCos
- uid: MathSharp.Vector.SinCosEstimate*
  commentId: Overload:MathSharp.Vector.SinCosEstimate
  name: SinCosEstimate
  nameWithType: Vector.SinCosEstimate
  fullName: MathSharp.Vector.SinCosEstimate
- uid: MathSharp.Vector.OneDouble*
  commentId: Overload:MathSharp.Vector.OneDouble
  name: OneDouble
  nameWithType: Vector.OneDouble
  fullName: MathSharp.Vector.OneDouble
- uid: MathSharp.Vector.ZeroDouble*
  commentId: Overload:MathSharp.Vector.ZeroDouble
  name: ZeroDouble
  nameWithType: Vector.ZeroDouble
  fullName: MathSharp.Vector.ZeroDouble
- uid: MathSharp.Vector.Normalize2D*
  commentId: Overload:MathSharp.Vector.Normalize2D
  name: Normalize2D
  nameWithType: Vector.Normalize2D
  fullName: MathSharp.Vector.Normalize2D
- uid: MathSharp.Vector.Normalize3D*
  commentId: Overload:MathSharp.Vector.Normalize3D
  name: Normalize3D
  nameWithType: Vector.Normalize3D
  fullName: MathSharp.Vector.Normalize3D
- uid: MathSharp.Vector.Normalize4D*
  commentId: Overload:MathSharp.Vector.Normalize4D
  name: Normalize4D
  nameWithType: Vector.Normalize4D
  fullName: MathSharp.Vector.Normalize4D
- uid: MathSharp.Vector.Length2D*
  commentId: Overload:MathSharp.Vector.Length2D
  name: Length2D
  nameWithType: Vector.Length2D
  fullName: MathSharp.Vector.Length2D
- uid: MathSharp.Vector.Length3D*
  commentId: Overload:MathSharp.Vector.Length3D
  name: Length3D
  nameWithType: Vector.Length3D
  fullName: MathSharp.Vector.Length3D
- uid: MathSharp.Vector.Length4D*
  commentId: Overload:MathSharp.Vector.Length4D
  name: Length4D
  nameWithType: Vector.Length4D
  fullName: MathSharp.Vector.Length4D
- uid: MathSharp.Vector.LengthSquared2D*
  commentId: Overload:MathSharp.Vector.LengthSquared2D
  name: LengthSquared2D
  nameWithType: Vector.LengthSquared2D
  fullName: MathSharp.Vector.LengthSquared2D
- uid: MathSharp.Vector.LengthSquared3D*
  commentId: Overload:MathSharp.Vector.LengthSquared3D
  name: LengthSquared3D
  nameWithType: Vector.LengthSquared3D
  fullName: MathSharp.Vector.LengthSquared3D
- uid: MathSharp.Vector.LengthSquared4D*
  commentId: Overload:MathSharp.Vector.LengthSquared4D
  name: LengthSquared4D
  nameWithType: Vector.LengthSquared4D
  fullName: MathSharp.Vector.LengthSquared4D
- uid: MathSharp.Vector.DotProduct2D*
  commentId: Overload:MathSharp.Vector.DotProduct2D
  name: DotProduct2D
  nameWithType: Vector.DotProduct2D
  fullName: MathSharp.Vector.DotProduct2D
- uid: MathSharp.Vector.DotProduct3D*
  commentId: Overload:MathSharp.Vector.DotProduct3D
  name: DotProduct3D
  nameWithType: Vector.DotProduct3D
  fullName: MathSharp.Vector.DotProduct3D
- uid: MathSharp.Vector.DotProduct4D*
  commentId: Overload:MathSharp.Vector.DotProduct4D
  name: DotProduct4D
  nameWithType: Vector.DotProduct4D
  fullName: MathSharp.Vector.DotProduct4D
- uid: MathSharp.Vector.CrossProduct2D*
  commentId: Overload:MathSharp.Vector.CrossProduct2D
  name: CrossProduct2D
  nameWithType: Vector.CrossProduct2D
  fullName: MathSharp.Vector.CrossProduct2D
- uid: MathSharp.Vector.CrossProduct3D*
  commentId: Overload:MathSharp.Vector.CrossProduct3D
  name: CrossProduct3D
  nameWithType: Vector.CrossProduct3D
  fullName: MathSharp.Vector.CrossProduct3D
- uid: MathSharp.Vector.CrossProduct4D*
  commentId: Overload:MathSharp.Vector.CrossProduct4D
  name: CrossProduct4D
  nameWithType: Vector.CrossProduct4D
  fullName: MathSharp.Vector.CrossProduct4D
- uid: MathSharp.Vector.Distance2D*
  commentId: Overload:MathSharp.Vector.Distance2D
  name: Distance2D
  nameWithType: Vector.Distance2D
  fullName: MathSharp.Vector.Distance2D
- uid: MathSharp.Vector.Distance3D*
  commentId: Overload:MathSharp.Vector.Distance3D
  name: Distance3D
  nameWithType: Vector.Distance3D
  fullName: MathSharp.Vector.Distance3D
- uid: MathSharp.Vector.Distance4D*
  commentId: Overload:MathSharp.Vector.Distance4D
  name: Distance4D
  nameWithType: Vector.Distance4D
  fullName: MathSharp.Vector.Distance4D
- uid: MathSharp.Vector.DistanceSquared2D*
  commentId: Overload:MathSharp.Vector.DistanceSquared2D
  name: DistanceSquared2D
  nameWithType: Vector.DistanceSquared2D
  fullName: MathSharp.Vector.DistanceSquared2D
- uid: MathSharp.Vector.DistanceSquared3D*
  commentId: Overload:MathSharp.Vector.DistanceSquared3D
  name: DistanceSquared3D
  nameWithType: Vector.DistanceSquared3D
  fullName: MathSharp.Vector.DistanceSquared3D
- uid: MathSharp.Vector.DistanceSquared4D*
  commentId: Overload:MathSharp.Vector.DistanceSquared4D
  name: DistanceSquared4D
  nameWithType: Vector.DistanceSquared4D
  fullName: MathSharp.Vector.DistanceSquared4D
- uid: MathSharp.Vector.Lerp*
  commentId: Overload:MathSharp.Vector.Lerp
  name: Lerp
  nameWithType: Vector.Lerp
  fullName: MathSharp.Vector.Lerp
- uid: MathSharp.Vector.Reflect2D*
  commentId: Overload:MathSharp.Vector.Reflect2D
  name: Reflect2D
  nameWithType: Vector.Reflect2D
  fullName: MathSharp.Vector.Reflect2D
- uid: MathSharp.Vector.Reflect3D*
  commentId: Overload:MathSharp.Vector.Reflect3D
  name: Reflect3D
  nameWithType: Vector.Reflect3D
  fullName: MathSharp.Vector.Reflect3D
- uid: MathSharp.Vector.Reflect4D*
  commentId: Overload:MathSharp.Vector.Reflect4D
  name: Reflect4D
  nameWithType: Vector.Reflect4D
  fullName: MathSharp.Vector.Reflect4D
- uid: System.Runtime.Intrinsics.Vector128{System.Single}
  commentId: T:System.Runtime.Intrinsics.Vector128{System.Single}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector128`1
  name: Vector128<Single>
  nameWithType: Vector128<Single>
  fullName: System.Runtime.Intrinsics.Vector128<System.Single>
  nameWithType.vb: Vector128(Of Single)
  fullName.vb: System.Runtime.Intrinsics.Vector128(Of System.Single)
  name.vb: Vector128(Of Single)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MathSharp.Vector.Floor*
  commentId: Overload:MathSharp.Vector.Floor
  name: Floor
  nameWithType: Vector.Floor
  fullName: MathSharp.Vector.Floor
- uid: MathSharp.Vector.AllTrue*
  commentId: Overload:MathSharp.Vector.AllTrue
  name: AllTrue
  nameWithType: Vector.AllTrue
  fullName: MathSharp.Vector.AllTrue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MathSharp.Vector.AnyTrue*
  commentId: Overload:MathSharp.Vector.AnyTrue
  name: AnyTrue
  nameWithType: Vector.AnyTrue
  fullName: MathSharp.Vector.AnyTrue
- uid: MathSharp.Vector.AllFalse*
  commentId: Overload:MathSharp.Vector.AllFalse
  name: AllFalse
  nameWithType: Vector.AllFalse
  fullName: MathSharp.Vector.AllFalse
- uid: MathSharp.Vector.AnyFalse*
  commentId: Overload:MathSharp.Vector.AnyFalse
  name: AnyFalse
  nameWithType: Vector.AnyFalse
  fullName: MathSharp.Vector.AnyFalse
- uid: MathSharp.Vector.ElementTrue*
  commentId: Overload:MathSharp.Vector.ElementTrue
  name: ElementTrue
  nameWithType: Vector.ElementTrue
  fullName: MathSharp.Vector.ElementTrue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MathSharp.Vector.ElementFalse*
  commentId: Overload:MathSharp.Vector.ElementFalse
  name: ElementFalse
  nameWithType: Vector.ElementFalse
  fullName: MathSharp.Vector.ElementFalse
- uid: System.Single*
  isExternal: true
  name: Single*
  nameWithType: Single*
  fullName: System.Single*
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: MathSharp.Vector.Load*
  commentId: Overload:MathSharp.Vector.Load
  name: Load
  nameWithType: Vector.Load
  fullName: MathSharp.Vector.Load
- uid: System.Numerics.Vector4
  commentId: T:System.Numerics.Vector4
  parent: System.Numerics
  isExternal: true
  name: Vector4
  nameWithType: Vector4
  fullName: System.Numerics.Vector4
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
- uid: System.Numerics.Vector3
  commentId: T:System.Numerics.Vector3
  parent: System.Numerics
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Numerics.Vector2
  commentId: T:System.Numerics.Vector2
  parent: System.Numerics
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2
- uid: MathSharp.Vector.Store*
  commentId: Overload:MathSharp.Vector.Store
  name: Store
  nameWithType: Vector.Store
  fullName: MathSharp.Vector.Store
- uid: System.Runtime.Intrinsics.Vector128{System.Int32}
  commentId: T:System.Runtime.Intrinsics.Vector128{System.Int32}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector128`1
  name: Vector128<Int32>
  nameWithType: Vector128<Int32>
  fullName: System.Runtime.Intrinsics.Vector128<System.Int32>
  nameWithType.vb: Vector128(Of Int32)
  fullName.vb: System.Runtime.Intrinsics.Vector128(Of System.Int32)
  name.vb: Vector128(Of Int32)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Intrinsics.Vector128{System.UInt32}
  commentId: T:System.Runtime.Intrinsics.Vector128{System.UInt32}
  parent: System.Runtime.Intrinsics
  definition: System.Runtime.Intrinsics.Vector128`1
  name: Vector128<UInt32>
  nameWithType: Vector128<UInt32>
  fullName: System.Runtime.Intrinsics.Vector128<System.UInt32>
  nameWithType.vb: Vector128(Of UInt32)
  fullName.vb: System.Runtime.Intrinsics.Vector128(Of System.UInt32)
  name.vb: Vector128(Of UInt32)
  spec.csharp:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.Intrinsics.Vector128`1
    name: Vector128
    nameWithType: Vector128
    fullName: System.Runtime.Intrinsics.Vector128
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
